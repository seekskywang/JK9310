<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Aug 06 15:51:56 2022
<BR><P>
<H3>Maximum Stack Usage =        644 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
DMM_MeasureVoltageDcQ &rArr; SCPI_ParamNumber &rArr; SCPI_ParamToDouble &rArr; strToDouble &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3ed]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">HardFault_Handler</a><BR>
 <LI><a href="#[c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemManage_Handler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
 <LI><a href="#[f]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SVC_Handler</a><BR>
 <LI><a href="#[10]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DebugMon_Handler</a><BR>
 <LI><a href="#[11]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">PendSV_Handler</a><BR>
 <LI><a href="#[29]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">ADC_IRQHandler</a><BR>
 <LI><a href="#[321]">regUpdate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31f]">SCPI_RegSet</a><BR>
 <LI><a href="#[320]">regUpdateSTB</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[304]">SCPI_RegSetBits</a><BR>
 <LI><a href="#[302]">SCPI_RegClearBits</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31f]">SCPI_RegSet</a><BR>
 <LI><a href="#[31e]">regUpdateEvent</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31f]">SCPI_RegSet</a><BR>
 <LI><a href="#[4b7]">_EnlargeBlocks</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[424]">_Alloc</a><BR>
 <LI><a href="#[49b]">WM__SendMessage</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48c]">WM_DefaultProc</a><BR>
 <LI><a href="#[4a4]">WM__InvalidateRect</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a4]">WM__InvalidateRect</a><BR>
 <LI><a href="#[498]">WM_InvalidateWindowAndDescsEx</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[498]">WM_InvalidateWindowAndDescsEx</a><BR>
 <LI><a href="#[493]">WM__InvalidateDrawAndDescs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[493]">WM__InvalidateDrawAndDescs</a><BR>
 <LI><a href="#[4ba]">_Findy1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4ba]">_Findy1</a><BR>
 <LI><a href="#[4bc]">_Findx1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4bc]">_Findx1</a><BR>
 <LI><a href="#[4bb]">_Findx0</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4bb]">_Findx0</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9b]">ACMode</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[29]">ADC_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[8f]">ARCQ1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[90]">ARCS1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[2a]">BOD_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[35]">CANActivity_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2c]">CAN_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[87]">CLOWAcQ1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[88]">CLOWAcS1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[85]">CUpperAcQ1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[86]">CUpperAcS1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[9c]">DCMode</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[2d]">DMA_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[77]">DMM_ConfigureVoltageDc</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[79]">DMM_MeasureVoltageAcQ</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[76]">DMM_MeasureVoltageDcQ</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[10]">DebugMon_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[3b]">EEPROM_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[25]">EINT0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[26]">EINT1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[27]">EINT2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[28]">EINT3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2f]">ENET_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[91]">FREQQ1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[92]">FREQS1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[8d]">FTIMQ1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[8e]">FTIMS1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[39]">GPIO_IRQHandler</a> from main.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[ab]">GUIMONO_DispChar</a> from gui_charm.o(i.GUIMONO_DispChar) referenced from f6x8.o(.constdata)
 <LI><a href="#[ac]">GUIMONO_GetCharDistX</a> from gui_charm.o(i.GUIMONO_GetCharDistX) referenced from f6x8.o(.constdata)
 <LI><a href="#[ad]">GUIMONO_GetFontInfo</a> from gui_charm.o(i.GUIMONO_GetFontInfo) referenced from f6x8.o(.constdata)
 <LI><a href="#[ae]">GUIMONO_IsInFont</a> from gui_charm.o(i.GUIMONO_IsInFont) referenced from f6x8.o(.constdata)
 <LI><a href="#[5e]">GUIPROP_DispChar</a> from gui_charp.o(i.GUIPROP_DispChar) referenced 6 times from gui_fontxbffon16.o(.constdata)
 <LI><a href="#[5f]">GUIPROP_GetCharDistX</a> from gui_charp.o(i.GUIPROP_GetCharDistX) referenced 6 times from gui_fontxbffon16.o(.constdata)
 <LI><a href="#[60]">GUIPROP_GetFontInfo</a> from gui_charp.o(i.GUIPROP_GetFontInfo) referenced 6 times from gui_fontxbffon16.o(.constdata)
 <LI><a href="#[61]">GUIPROP_IsInFont</a> from gui_charp.o(i.GUIPROP_IsInFont) referenced 6 times from gui_fontxbffon16.o(.constdata)
 <LI><a href="#[5c]">GUI_MEMDEV__WriteToActiveOpaque</a> from guidev_writetoactiveopaque.o(i.GUI_MEMDEV__WriteToActiveOpaque) referenced from guidev_16.o(i._GetDevFunc)
 <LI><a href="#[8]">GUI_X_ExecIdle</a> from gui_x.o(.text) referenced 2 times from gui_waitevent.o(.data)
 <LI><a href="#[b]">HardFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1d]">I2C0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1e]">I2C1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1f]">I2C2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2e]">I2S_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[9d]">IRMode</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[46]">LCD_DrawHLine</a> from lcd.o(i.LCD_DrawHLine) referenced from gui_core.o(.constdata)
 <LI><a href="#[46]">LCD_DrawHLine</a> from lcd.o(i.LCD_DrawHLine) referenced from gui_drawgradientrounded.o(i.GUI_DrawGradientRoundedV)
 <LI><a href="#[a1]">LCD_DrawPixel</a> from lcd.o(i.LCD_DrawPixel) referenced from gui_core.o(.constdata)
 <LI><a href="#[6]">LCD_GetpPalConvTableBM</a> from lcd_color.o(i.LCD_GetpPalConvTableBM) referenced 2 times from gui_core.o(.data)
 <LI><a href="#[38]">LCD_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[a7]">LCD_Index2Color_565</a> from guicc_565.o(i.LCD_Index2Color_565) referenced from guicc_565.o(.constdata)
 <LI><a href="#[30]">MCI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[31]">MCPWM_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[6d]">My_CoreTstQ</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[a]">NMI_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[93]">OPENQ1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[94]">OPENS1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[9e]">OSMode</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[23]">PLL0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[33]">PLL1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[3a]">PWM0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1c]">PWM1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[81]">PageQuery</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[82]">PageSet</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[11]">PendSV_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[32]">QEI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[24]">RTC_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[8b]">RTIMQ1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[8c]">RTIMS1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[9f]">ReadRes</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[9]">Reset_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[62]">SCPI_CoreCls</a> from ieee488.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[63]">SCPI_CoreEse</a> from ieee488.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[64]">SCPI_CoreEseQ</a> from ieee488.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[65]">SCPI_CoreEsrQ</a> from ieee488.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[66]">SCPI_CoreIdnQ</a> from ieee488.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[67]">SCPI_CoreOpc</a> from ieee488.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[68]">SCPI_CoreOpcQ</a> from ieee488.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[69]">SCPI_CoreRst</a> from ieee488.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[6a]">SCPI_CoreSre</a> from ieee488.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[6b]">SCPI_CoreSreQ</a> from ieee488.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[6c]">SCPI_CoreStbQ</a> from ieee488.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[6e]">SCPI_CoreWai</a> from ieee488.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[75]">SCPI_StatusPreset</a> from minimal.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[73]">SCPI_StatusQuestionableEnable</a> from minimal.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[74]">SCPI_StatusQuestionableEnableQ</a> from minimal.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[72]">SCPI_StatusQuestionableEventQ</a> from minimal.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[78]">SCPI_StubQ</a> from minimal.o(.text) referenced 7 times from scpi-def.o(.constdata)
 <LI><a href="#[7a]">SCPI_SystemCommTcpipControlQ</a> from test.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[70]">SCPI_SystemErrorCountQ</a> from minimal.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[6f]">SCPI_SystemErrorNextQ</a> from minimal.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[71]">SCPI_SystemVersionQ</a> from minimal.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[5]">SCPI_Write</a> from test.o(.text) referenced 2 times from scpi-def.o(.data)
 <LI><a href="#[95]">SHORTQ1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[96]">SHORTS1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[20]">SPIFI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[21]">SSP0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[22]">SSP1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[37]">SSP2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[99]">SetStep</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[9a]">SetTSteps</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[97]">StartT</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[98]">StopT</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[12]">SysTick_Handler</a> from key.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[3c]">SystemInit</a> from system_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(.text)
 <LI><a href="#[7f]">TEST_ArbQ</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[7b]">TEST_Bool</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[80]">TEST_Chanlst</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[7c]">TEST_ChoiceQ</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[7d]">TEST_Numbers</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[7e]">TEST_Text</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[14]">TIMER0_IRQHandler</a> from timer.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[15]">TIMER1_IRQHandler</a> from timer.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[16]">TIMER2_IRQHandler</a> from timer.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[17]">TIMER3_IRQHandler</a> from timer.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[89]">TTIMQ1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[8a]">TTIMS1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[18]">UART0_IRQHandler</a> from debug_frmwrk.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[19]">UART1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1a]">UART2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1b]">UART3_IRQHandler</a> from debug_frmwrk.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[36]">UART4_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[292]">UARTGetChar</a> from debug_frmwrk.o(.text) referenced 2 times from debug_frmwrk.o(.text)
 <LI><a href="#[294]">UARTGetValue</a> from debug_frmwrk.o(.text) referenced 2 times from debug_frmwrk.o(.text)
 <LI><a href="#[183]">UARTPutChar</a> from debug_frmwrk.o(.text) referenced 2 times from debug_frmwrk.o(.text)
 <LI><a href="#[296]">UARTPutDec</a> from debug_frmwrk.o(.text) referenced 2 times from debug_frmwrk.o(.text)
 <LI><a href="#[297]">UARTPutDec16</a> from debug_frmwrk.o(.text) referenced 2 times from debug_frmwrk.o(.text)
 <LI><a href="#[298]">UARTPutDec32</a> from debug_frmwrk.o(.text) referenced 2 times from debug_frmwrk.o(.text)
 <LI><a href="#[29a]">UARTPutHex</a> from debug_frmwrk.o(.text) referenced 2 times from debug_frmwrk.o(.text)
 <LI><a href="#[29c]">UARTPutHex16</a> from debug_frmwrk.o(.text) referenced 2 times from debug_frmwrk.o(.text)
 <LI><a href="#[29b]">UARTPutHex16_</a> from debug_frmwrk.o(.text) referenced 2 times from debug_frmwrk.o(.text)
 <LI><a href="#[29e]">UARTPutHex32</a> from debug_frmwrk.o(.text) referenced 2 times from debug_frmwrk.o(.text)
 <LI><a href="#[29d]">UARTPutHex32_</a> from debug_frmwrk.o(.text) referenced 2 times from debug_frmwrk.o(.text)
 <LI><a href="#[299]">UARTPutHex_</a> from debug_frmwrk.o(.text) referenced 2 times from debug_frmwrk.o(.text)
 <LI><a href="#[293]">UARTPuts</a> from debug_frmwrk.o(.text) referenced 2 times from debug_frmwrk.o(.text)
 <LI><a href="#[295]">UARTPuts_</a> from debug_frmwrk.o(.text) referenced 2 times from debug_frmwrk.o(.text)
 <LI><a href="#[34]">USBActivity_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2b]">USB_IRQHandler</a> from usbhost_lpc17xx.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[83]">VoltageAcQ1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[84]">VoltageAcS1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[a0]">VoltageDcQ1</a> from scpi-def.o(.text) referenced from scpi-def.o(.constdata)
 <LI><a href="#[13]">WDT_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[a4]">_CalcSizeOfChar</a> from gui_uc_encodeutf8.o(i._CalcSizeOfChar) referenced 2 times from gui_uc_encodeutf8.o(.constdata)
 <LI><a href="#[a9]">_Color2IndexBulk</a> from guicc_565.o(i._Color2IndexBulk) referenced from guicc_565.o(.constdata)
 <LI><a href="#[ce]">_Color2Index_0</a> from guicc_0.o(i._Color2Index_0) referenced from guicc_0.o(.constdata)
 <LI><a href="#[a6]">_Color2Index_565</a> from guicc_565.o(i._Color2Index_565) referenced from guicc_565.o(.constdata)
 <LI><a href="#[58]">_CopyBuffer</a> from guidrv_lin_16.o(i._CopyBuffer) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[af]">_DrawBitmap</a> from guidrv_lin_16.o(i._DrawBitmap) referenced 2 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[b0]">_DrawHLine</a> from guidrv_lin_16.o(i._DrawHLine) referenced 2 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[b1]">_DrawVLine</a> from guidrv_lin_16.o(i._DrawVLine) referenced 2 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[a5]">_Encode</a> from gui_uc_encodeutf8.o(i._Encode) referenced 2 times from gui_uc_encodeutf8.o(.constdata)
 <LI><a href="#[b2]">_FillRect</a> from guidrv_lin_16.o(i._FillRect) referenced 2 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[a2]">_GetCharCode</a> from gui_uc_encodeutf8.o(i._GetCharCode) referenced 2 times from gui_uc_encodeutf8.o(.constdata)
 <LI><a href="#[a3]">_GetCharSize</a> from gui_uc_encodeutf8.o(i._GetCharSize) referenced 2 times from gui_uc_encodeutf8.o(.constdata)
 <LI><a href="#[b9]">_GetDevData</a> from guidrv_lin_16.o(i._GetDevData) referenced 2 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[b7]">_GetDevFunc</a> from guidrv_lin_16.o(i._GetDevFunc) referenced 2 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[b8]">_GetDevProp</a> from guidrv_lin_16.o(i._GetDevProp) referenced 2 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[d0]">_GetIndexMask_0</a> from guicc_0.o(i._GetIndexMask_0) referenced from guicc_0.o(.constdata)
 <LI><a href="#[a8]">_GetIndexMask_565</a> from guicc_565.o(i._GetIndexMask_565) referenced from guicc_565.o(.constdata)
 <LI><a href="#[b3]">_GetPixelIndex</a> from guidrv_lin_16.o(i._GetPixelIndex) referenced 2 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[4f]">_GetPos</a> from guidrv_lin_16.o(i._GetPos) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[ba]">_GetRect</a> from guidrv_lin_16.o(i._GetRect) referenced 2 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[aa]">_Index2ColorBulk</a> from guicc_565.o(i._Index2ColorBulk) referenced from guicc_565.o(.constdata)
 <LI><a href="#[cf]">_Index2Color_0</a> from guicc_0.o(i._Index2Color_0) referenced from guicc_0.o(.constdata)
 <LI><a href="#[52]">_Init</a> from guidrv_lin_16.o(i._Init) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[7]">_Log2VisBuffered</a> from gui_charline.o(i._Log2VisBuffered) referenced 2 times from gui_charline.o(.data)
 <LI><a href="#[54]">_Off</a> from guidrv_lin_16.o(i._Off) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[53]">_On</a> from guidrv_lin_16.o(i._On) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[45]">_OnExit</a> from gui_task.o(i._OnExit) referenced from gui_task.o(i.GUITASK_Init)
 <LI><a href="#[47]">_OnExit</a> from gui_core.o(i._OnExit) referenced from gui_core.o(i.GUI__Config)
 <LI><a href="#[48]">_OnExit</a> from lcd_color.o(i._OnExit) referenced from lcd_color.o(i.LCD_InitColors)
 <LI><a href="#[4a]">_OnExit</a> from wm.o(i._OnExit) referenced from wm.o(i.WM_Init)
 <LI><a href="#[5d]">_OnExit</a> from gui_alloc.o(i._OnExit) referenced from gui_alloc.o(i._InitOnce)
 <LI><a href="#[5b]">_ReadRect</a> from guidrv_lin_16.o(i._ReadRect) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[50]">_SetAlpha</a> from guidrv_lin_16.o(i._SetAlpha) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[55]">_SetAlphaMode</a> from guidrv_lin_16.o(i._SetAlphaMode) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[c0]">_SetBkColor</a> from lcd.o(i._SetBkColor) referenced from lcd.o(.constdata)
 <LI><a href="#[57]">_SetChroma</a> from guidrv_lin_16.o(i._SetChroma) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[56]">_SetChromaMode</a> from guidrv_lin_16.o(i._SetChromaMode) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[bf]">_SetColor</a> from lcd.o(i._SetColor) referenced from lcd.o(.constdata)
 <LI><a href="#[5a]">_SetDevFunc</a> from guidrv_lin_16.o(i._SetDevFunc) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[c1]">_SetDrawMode</a> from lcd.o(i._SetDrawMode) referenced from lcd.o(.constdata)
 <LI><a href="#[b6]">_SetOrg</a> from guidrv_lin_16.o(i._SetOrg) referenced 2 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[b4]">_SetPixelIndex</a> from guidrv_lin_16.o(i._SetPixelIndex) referenced 2 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[4e]">_SetPos</a> from guidrv_lin_16.o(i._SetPos) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[4d]">_SetSize</a> from guidrv_lin_16.o(i._SetSize) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[4b]">_SetVRAMAddr</a> from guidrv_lin_16.o(i._SetVRAMAddr) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[4c]">_SetVSize</a> from guidrv_lin_16.o(i._SetVSize) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[51]">_SetVis</a> from guidrv_lin_16.o(i._SetVis) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[59]">_ShowBuffer</a> from guidrv_lin_16.o(i._ShowBuffer) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[b5]">_XorPixel</a> from guidrv_lin_16.o(i._XorPixel) referenced 2 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[d1]">__main</a> from __main.o(!!!main) referenced from startup_lpc177x_8x.o(.text)
 <LI><a href="#[49]">_cbBackWin</a> from wm.o(i._cbBackWin) referenced from wm.o(i.WM_Init)
 <LI><a href="#[3e]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[41]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[43]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[42]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[40]">_snputc</a> from _snputc.o(.text) referenced from noretval__2snprintf.o(.text)
 <LI><a href="#[3f]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[44]">isspace</a> from isspace.o(.text) referenced from strtod.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[d1]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d2]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[d4]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[4f6]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4f7]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4f8]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[4f9]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[4fa]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[d5]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[3ca]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[d7]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d8]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[da]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[4fb]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[e4]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[4fc]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[4fd]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[dc]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[4fe]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[4ff]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[500]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[501]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[de]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[502]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[503]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[df]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[504]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[505]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[506]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[507]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[508]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[509]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[50a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[50b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[50c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[50d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[50e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[50f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[510]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[e9]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[511]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[512]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[513]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[514]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[515]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[516]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[517]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[d3]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[518]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[e1]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e3]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[519]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[e5]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Setup_config_Process &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[51a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[3f4]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e8]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[51b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[ea]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[ed]"></a>EMC_GPIO_Init</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, ex_sdram.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
</UL>

<P><STRONG><a name="[ec]"></a>SDRAM_Init</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, ex_sdram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDRAM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[e6]"></a>main</STRONG> (Thumb, 262 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = main &rArr; Setup_config_Process &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_SysSetProcess
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPause_Process
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Process
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Process
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_config_Process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idem_Process
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finsh_Process
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Process
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Process
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abroat_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[fe]"></a>Main_Write</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Read
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Open
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Close
</UL>

<P><STRONG><a name="[39]"></a>GPIO_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetIntStatus
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[105]"></a>MODS_Poll</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = MODS_Poll &rArr; RecHandle &rArr; MODS_03H &rArr; MODS_SendWithCRC &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>delayMs</STRONG> (Thumb, 252 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_4094
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Range_Control
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cpld
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DA_out
</UL>

<P><STRONG><a name="[14]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = TIMER0_IRQHandler &rArr; MODS_Poll &rArr; RecHandle &rArr; MODS_03H &rArr; MODS_SendWithCRC &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_Poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER1_IRQHandler &rArr; HV_Ledon &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HV_Ledon
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HV_Ledoff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1ee]"></a>enable_timer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[51c]"></a>disable_timer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[51d]"></a>reset_timer</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>init_timer</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[2f5]"></a>GLCD_Ctrl</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lpc177x_8x_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GLCD_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitController
</UL>

<P><STRONG><a name="[10c]"></a>GLCD_SetPallet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc177x_8x_lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
</UL>

<P><STRONG><a name="[10b]"></a>GLCD_Init</STRONG> (Thumb, 472 bytes, Stack size 12 bytes, lpc177x_8x_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GLCD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetPallet
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitController
</UL>

<P><STRONG><a name="[1a5]"></a>lcd_Clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Num
</UL>

<P><STRONG><a name="[10e]"></a>LCD_SetPoint</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFontCN
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFontCN_16
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFontCN_40_55
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_coord
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar_12
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD429_PutPixel
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[10d]"></a>LCD_DrawLine</STRONG> (Thumb, 250 bytes, Stack size 36 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SysLine
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect_Rect
</UL>

<P><STRONG><a name="[10f]"></a>LCD_DrawRect_Rect</STRONG> (Thumb, 82 bytes, Stack size 28 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Num
</UL>

<P><STRONG><a name="[130]"></a>LCD_DrawRect</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_NumKeyboard_Set
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_open
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Num
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_Numtouch
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListBox_Setup
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ListScan_MidRect
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_LimitList_MidRect
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Set_Time
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Debug_value
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_value
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_List_Count_MidRect
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Rang_Count_MidRect
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Range_MidRect
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TopBar_Color
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_compvalue
</UL>

<P><STRONG><a name="[51e]"></a>LCD_DrawCircle</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, lpc177x_8x_lcd.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>LCD429_PutPixel</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_Numtouch
</UL>

<P><STRONG><a name="[111]"></a>PutChar</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASCIICode
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_value
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_compvalue
</UL>

<P><STRONG><a name="[113]"></a>PutChar_12</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASCIICode_12
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_12
</UL>

<P><STRONG><a name="[115]"></a>GUI_Text</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
</UL>

<P><STRONG><a name="[116]"></a>lcd_display_coord</STRONG> (Thumb, 294 bytes, Stack size 52 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
</UL>

<P><STRONG><a name="[11d]"></a>findHzIndex</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString
</UL>

<P><STRONG><a name="[120]"></a>findHzIndex_16</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_12
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>

<P><STRONG><a name="[117]"></a>LCD_ShowFontCN_40_55</STRONG> (Thumb, 138 bytes, Stack size 36 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Usbflag
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_RangeDispvalue
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Big_SecondUnit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Big_MainUnit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_R_X
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Cp_Rp
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_Big
</UL>

<P><STRONG><a name="[118]"></a>LCD_ShowFontCN_16</STRONG> (Thumb, 252 bytes, Stack size 36 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneHzChar_16
</UL>

<P><STRONG><a name="[119]"></a>LCD_ShowFontCN</STRONG> (Thumb, 232 bytes, Stack size 36 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneHzChar
</UL>

<P><STRONG><a name="[11a]"></a>WriteOneHzChar</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFontCN
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString
</UL>

<P><STRONG><a name="[11b]"></a>WriteOneHzChar_16</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFontCN_16
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_12
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>

<P><STRONG><a name="[11c]"></a>WriteString</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneHzChar
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findHzIndex
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
</UL>

<P><STRONG><a name="[11e]"></a>WriteString_Big</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFontCN_40_55
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp__
</UL>

<P><STRONG><a name="[11f]"></a>WriteString_16</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneHzChar_16
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findHzIndex_16
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_NumKeyboard_Set
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Num
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_Numtouch
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Teststatue
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListBox_Setup
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Range
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_Unit_mA
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_Unit_v
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Set_Unit_16
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Range_DispSecondUnit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Range_DispMainUnit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_RangeDispvalue
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Sys_Item
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ListScan_Item
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UserCheck_Item
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Set_Time
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Debug_value
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Debug_Reference
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_value
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_List_Count_Item
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_Item
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TopBar_Color
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Button_SysSet
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Button_TestSet
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Button_ItemScanSet
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Button_ItemScan_no
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Button_value1
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_button_Num_Avg
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_button_Num_Freq
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_button_Num_Input
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_button_Num_time
</UL>

<P><STRONG><a name="[121]"></a>WriteString_12</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, lpc177x_8x_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneHzChar_16
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findHzIndex_16
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar_12
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Set_Unit_12
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_RangeCount
</UL>

<P><STRONG><a name="[150]"></a>Hex_Format</STRONG> (Thumb, 198 bytes, Stack size 20 bytes, lpc177x_8x_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Hex_Format
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_DelayTime
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_RangeCount
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Testvalue
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Debug_value
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Debug_Reference
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSetConfig_value
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSet_value
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_value
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_Item
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_list
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_List
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD_Int
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_BCD_Int
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
</UL>

<P><STRONG><a name="[51f]"></a>lcd_image</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lpc177x_8x_lcd.o(.text), UNUSED)

<P><STRONG><a name="[520]"></a>lcd_image2</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lpc177x_8x_lcd.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>GetASCIICode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, asciilib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
</UL>

<P><STRONG><a name="[114]"></a>GetASCIICode_12</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, asciilib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar_12
</UL>

<P><STRONG><a name="[123]"></a>Disp_Fastbutton</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Disp_Fastbutton &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Pre_Uint
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Sys
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispSYSSetButtonvalue
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispSYSButtonvalue
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSetup_ConfigButtonvalue
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispSetupButtonvalue
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_SetConfig_Item
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_Item
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_list
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_Set_Item
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SYS_Set_Item
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_Item
</UL>

<P><STRONG><a name="[126]"></a>Disp_button_Num_time</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Set_Num
</UL>

<P><STRONG><a name="[127]"></a>Disp_button_Num_Input</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Set_InputNum
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_compvalue
</UL>

<P><STRONG><a name="[128]"></a>Disp_button_Num_Freq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freq_Set_Num
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Set_CompNum
</UL>

<P><STRONG><a name="[129]"></a>Disp_button_Num_Avg</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avg_Set_Num
</UL>

<P><STRONG><a name="[12a]"></a>Disp_Button_value1</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_List_Count_Item
</UL>

<P><STRONG><a name="[12b]"></a>Disp_Button_ItemScan_no</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>

<P><STRONG><a name="[12c]"></a>Disp_Button_ItemScanSet</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>

<P><STRONG><a name="[12d]"></a>Disp_Button_TestSet</STRONG> (Thumb, 458 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ListScan_Item
</UL>

<P><STRONG><a name="[12e]"></a>Disp_Button_SysSet</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>

<P><STRONG><a name="[12f]"></a>Disp_TopBar_Color</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Sys_Item
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Sys_Screen
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ListScan_Screen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_LimitList_Screen
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Usercheck_Screen
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_List_CountScreen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Range_CountScreen
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_RangeScreen
</UL>

<P><STRONG><a name="[131]"></a>Disp_MidRect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TestScreen
</UL>

<P><STRONG><a name="[133]"></a>Disp_mainitem</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Disp_mainitem &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Sys
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_SetConfig_Item
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_Item
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_list
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_Set_Item
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SYS_Set_Item
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TestScreen
</UL>

<P><STRONG><a name="[138]"></a>Disp_TestScreen</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_mainitem
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MidRect
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_Item
</UL>

<P><STRONG><a name="[139]"></a>Disp_Fastset_Disp</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_Item
</UL>

<P><STRONG><a name="[13c]"></a>Disp_Test_Item</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Fastset_Disp
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TestScreen
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Fastbutton
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>

<P><STRONG><a name="[13d]"></a>Disp_Range_MidRect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_RangeScreen
</UL>

<P><STRONG><a name="[13e]"></a>Disp_RangeScreen</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Range_MidRect
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TopBar_Color
</UL>

<P><STRONG><a name="[13f]"></a>Disp_Rang_Count_MidRect</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Range_CountScreen
</UL>

<P><STRONG><a name="[140]"></a>Disp_Range_CountScreen</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Rang_Count_MidRect
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TopBar_Color
</UL>

<P><STRONG><a name="[141]"></a>Disp_List_Count_MidRect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_List_CountScreen
</UL>

<P><STRONG><a name="[142]"></a>Disp_List_CountScreen</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_List_Count_MidRect
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TopBar_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_List_Count_Item
</UL>

<P><STRONG><a name="[143]"></a>Disp_List_Count_Item</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_List_CountScreen
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Button_value1
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>

<P><STRONG><a name="[145]"></a>Disp_TestSet_MidRect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TestSetScreen
</UL>

<P><STRONG><a name="[144]"></a>Disp_TestSetScreen</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TestSet_MidRect
</UL>

<P><STRONG><a name="[146]"></a>Disp_SYS_Set_Item</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Disp_SYS_Set_Item &rArr; Disp_Fastbutton &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_mainitem
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Fastbutton
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_SysSetProcess
</UL>

<P><STRONG><a name="[147]"></a>Disp_Test_Set_Item</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Disp_Test_Set_Item &rArr; Disp_Fastbutton &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_mainitem
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Fastbutton
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Num
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
</UL>

<P><STRONG><a name="[148]"></a>disp_TestMSG</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = disp_TestMSG &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Testvalue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_List
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPause_Process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idem_Process
</UL>

<P><STRONG><a name="[149]"></a>FToStr</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FToStr &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_List
</UL>

<P><STRONG><a name="[14e]"></a>IntToStr</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IntToStr &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Testvalue
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSet_value
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_Item
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_List
</UL>

<P><STRONG><a name="[14f]"></a>Disp_Test_List</STRONG> (Thumb, 606 bytes, Stack size 16 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Disp_Test_List &rArr; disp_TestMSG &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToStr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FToStr
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_TestMSG
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_Format
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
</UL>

<P><STRONG><a name="[152]"></a>IntToStr_mA</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IntToStr_mA &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSet_value
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_Item
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_list
</UL>

<P><STRONG><a name="[153]"></a>Disp_Idel_list</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Disp_Idel_list &rArr; GUI_DispDecAt &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCharAt
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToStr_mA
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_mainitem
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Fastbutton
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_Format
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idem_Process
</UL>

<P><STRONG><a name="[156]"></a>Disp_Idel_Item</STRONG> (Thumb, 2730 bytes, Stack size 16 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = Disp_Idel_Item &rArr; GUI_DispDecAt &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToStr_mA
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToStr
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_mainitem
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Fastbutton
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_Format
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPause_Process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idem_Process
</UL>

<P><STRONG><a name="[158]"></a>Disp_Test_SetConfig_Item</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Disp_Test_SetConfig_Item &rArr; Disp_Fastbutton &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_mainitem
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Fastbutton
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_config_Process
</UL>

<P><STRONG><a name="[159]"></a>Disp_Test_value</STRONG> (Thumb, 572 bytes, Stack size 16 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_Format
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
</UL>

<P><STRONG><a name="[15a]"></a>dispSetupButtonvalue</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dispSetupButtonvalue &rArr; Disp_Fastbutton &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Fastbutton
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSet_value
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
</UL>

<P><STRONG><a name="[15b]"></a>DispSet_value</STRONG> (Thumb, 3260 bytes, Stack size 24 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = DispSet_value &rArr; dispSetupButtonvalue &rArr; Disp_Fastbutton &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispSetupButtonvalue
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToStr_mA
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToStr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_Format
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
</UL>

<P><STRONG><a name="[15c]"></a>DispSetup_ConfigButtonvalue</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = DispSetup_ConfigButtonvalue &rArr; Disp_Fastbutton &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Fastbutton
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSetConfig_value
</UL>

<P><STRONG><a name="[15d]"></a>DispSetConfig_value</STRONG> (Thumb, 672 bytes, Stack size 32 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DispSetConfig_value &rArr; DispSetup_ConfigButtonvalue &rArr; Disp_Fastbutton &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSetup_ConfigButtonvalue
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_Format
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_config_Process
</UL>

<P><STRONG><a name="[15e]"></a>dispSYSButtonvalue</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dispSYSButtonvalue &rArr; Disp_Fastbutton &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Fastbutton
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSYSConfig_value
</UL>

<P><STRONG><a name="[15f]"></a>DispSYSConfig_value</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = DispSYSConfig_value &rArr; dispSYSButtonvalue &rArr; Disp_Fastbutton &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispSYSButtonvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Process
</UL>

<P><STRONG><a name="[160]"></a>Disp_Debug_Reference</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_Format
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>

<P><STRONG><a name="[161]"></a>Disp_Debug_value</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_Format
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
</UL>

<P><STRONG><a name="[162]"></a>Disp_Set_Time</STRONG> (Thumb, 484 bytes, Stack size 64 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFullTime
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[164]"></a>dispSYSSetButtonvalue</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dispSYSSetButtonvalue &rArr; Disp_Fastbutton &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Fastbutton
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SysSet_value
</UL>

<P><STRONG><a name="[165]"></a>Disp_SysSet_value</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Disp_SysSet_value &rArr; dispSYSSetButtonvalue &rArr; Disp_Fastbutton &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispSYSSetButtonvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_SysSetProcess
</UL>

<P><STRONG><a name="[166]"></a>Disp_Usercheck_Screen</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TopBar_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UserCheck_Item
</UL>

<P><STRONG><a name="[167]"></a>Disp_UserCheck_Item</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Usercheck_Screen
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>

<P><STRONG><a name="[168]"></a>Disp_LimitList_MidRect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_LimitList_Screen
</UL>

<P><STRONG><a name="[169]"></a>Disp_LimitList_Screen</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_LimitList_MidRect
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TopBar_Color
</UL>

<P><STRONG><a name="[16a]"></a>Disp_ListScan_MidRect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
</UL>

<P><STRONG><a name="[16b]"></a>Disp_ListScan_Screen</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TopBar_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ListScan_Item
</UL>

<P><STRONG><a name="[16c]"></a>Disp_ListScan_Item</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ListScan_Screen
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Button_TestSet
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>

<P><STRONG><a name="[16d]"></a>Disp_SysLine</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[16e]"></a>Disp_Sys_Screen</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TopBar_Color
</UL>

<P><STRONG><a name="[16f]"></a>Disp_Sys</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Disp_Sys &rArr; Disp_Fastbutton &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_mainitem
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Fastbutton
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Process
</UL>

<P><STRONG><a name="[170]"></a>Disp_Sys_Item</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TopBar_Color
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>

<P><STRONG><a name="[171]"></a>Time_Set_Cov</STRONG> (Thumb, 446 bytes, Stack size 56 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Set_Num
</UL>

<P><STRONG><a name="[212]"></a>Debug_Value</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freq_Set_Num
</UL>

<P><STRONG><a name="[175]"></a>Freq_Set_Cov</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avg_Set_Num
</UL>

<P><STRONG><a name="[176]"></a>Input_Set_Cov</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Set_InputNum
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Set_CompNum
</UL>

<P><STRONG><a name="[177]"></a>Input_Set_CovPre</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[17a]"></a>Disp_Cp_Rp</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFontCN_40_55
</UL>

<P><STRONG><a name="[17b]"></a>Disp__</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_Big
</UL>

<P><STRONG><a name="[17c]"></a>Disp_R_X</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFontCN_40_55
</UL>

<P><STRONG><a name="[17e]"></a>IntToStr_nF</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntToStr_nF
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Testvalue
</UL>

<P><STRONG><a name="[17d]"></a>Disp_Testvalue</STRONG> (Thumb, 702 bytes, Stack size 16 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Disp_Testvalue &rArr; disp_TestMSG &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToStr_nF
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToStr
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_TestMSG
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_Format
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idem_Process
</UL>

<P><STRONG><a name="[17f]"></a>Disp_Big_MainUnit</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFontCN_40_55
</UL>

<P><STRONG><a name="[180]"></a>Disp_Big_SecondUnit</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFontCN_40_55
</UL>

<P><STRONG><a name="[181]"></a>Send_UartClear</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[185]"></a>Disp_RangeDispvalue</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFontCN_40_55
</UL>

<P><STRONG><a name="[186]"></a>Disp_Range_DispMainUnit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>

<P><STRONG><a name="[187]"></a>Disp_Range_DispSecondUnit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>

<P><STRONG><a name="[188]"></a>Disp_RangeCount</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_Format
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_12
</UL>

<P><STRONG><a name="[189]"></a>Disp_Set_Unit_16</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>

<P><STRONG><a name="[18a]"></a>Disp_Set_Unit_12</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_12
</UL>

<P><STRONG><a name="[18b]"></a>Disp_Test_Unit_v</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>

<P><STRONG><a name="[18c]"></a>Disp_Test_Unit_mA</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>

<P><STRONG><a name="[18d]"></a>Savetoeeprom</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Savetoeeprom &rArr; EEPROM_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_SysSetProcess
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_config_Process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idem_Process
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_cleardata
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Read
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMode
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRMode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSteps
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStep
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHORTS1
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPENS1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FREQS1
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARCS1
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTIMS1
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTIMS1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTIMS1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOWAcS1
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUpperAcS1
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageAcS1
</UL>

<P><STRONG><a name="[18f]"></a>SaveCal</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SaveCal &rArr; EEPROM_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultCalibrate
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
</UL>

<P><STRONG><a name="[190]"></a>ReadSavedata</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ReadSavedata &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[192]"></a>ReadCal</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ReadCal &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[1f1]"></a>SetDate_Comp</STRONG> (Thumb, 656 bytes, Stack size 12 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetDate_Comp
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_SysSetProcess
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHORTS1
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPENS1
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARCS1
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTIMS1
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTIMS1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTIMS1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOWAcS1
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUpperAcS1
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageAcS1
</UL>

<P><STRONG><a name="[1f2]"></a>SetData_High_Low_Comp</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, use_disp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[193]"></a>Disp_Range</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_cleardata
</UL>

<P><STRONG><a name="[194]"></a>Disp_Usbflag</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFontCN_40_55
</UL>

<P><STRONG><a name="[195]"></a>ListBox_Setup</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read_WithTimeOut
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Beep
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[199]"></a>Number_Setup</STRONG> (Thumb, 454 bytes, Stack size 56 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read_WithTimeOut
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Beep
</UL>

<P><STRONG><a name="[19a]"></a>Disp_Teststatue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
</UL>

<P><STRONG><a name="[1a2]"></a>Disp_big_HZ</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_disp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_Disp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finsh_Process
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abroat_Process
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_cleardata
</UL>

<P><STRONG><a name="[19b]"></a>Comp_Disp</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pass_Led
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fail_led
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_on
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Off
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_big_HZ
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[521]"></a>Time_Set_Cov_num</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, use_disp.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>disp_Numtouch</STRONG> (Thumb, 506 bytes, Stack size 24 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD429_PutPixel
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Num
</UL>

<P><STRONG><a name="[1a4]"></a>Input_Num</STRONG> (Thumb, 1066 bytes, Stack size 72 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read_WithTimeOut
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_Numtouch
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_Set_Item
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect_Rect
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Clear
</UL>

<P><STRONG><a name="[1a6]"></a>Disp_open</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
</UL>

<P><STRONG><a name="[200]"></a>Disp_Time</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_disp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idem_Process
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finsh_Process
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abroat_Process
</UL>

<P><STRONG><a name="[1a7]"></a>Disp_IdelButton</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Disp_IdelButton &rArr; GUI_SetTextMode &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPause_Process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idem_Process
</UL>

<P><STRONG><a name="[1a8]"></a>Range_Control</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Range_Control &rArr; Out_4094 &rArr; Set_Spi_out &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_4094
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idem_Process
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
</UL>

<P><STRONG><a name="[1aa]"></a>ACW_Select</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACW_Select &rArr; Out_4094 &rArr; Set_Spi_out &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_4094
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRB_out
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
</UL>

<P><STRONG><a name="[1ac]"></a>DCW_Select</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DCW_Select &rArr; Out_4094 &rArr; Set_Spi_out &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_4094
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRB_out
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
</UL>

<P><STRONG><a name="[1ad]"></a>OS_Select</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OS_Select &rArr; Out_4094 &rArr; Set_Spi_out &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_4094
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRB_out
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Init
</UL>

<P><STRONG><a name="[1ae]"></a>Short_out</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Short_out &rArr; Out_4094 &rArr; Set_Spi_out &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_4094
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPause_Process
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Process
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idem_Process
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finsh_Process
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Process
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopT
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_WriteRegValue
</UL>

<P><STRONG><a name="[1af]"></a>ARC_out</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ARC_out &rArr; Out_4094 &rArr; Set_Spi_out &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_4094
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPause_Process
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Process
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abroat_Process
</UL>

<P><STRONG><a name="[1b0]"></a>Test_Init</STRONG> (Thumb, 964 bytes, Stack size 48 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Test_Init &rArr; Uart0_Send &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Send
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sing_out_C
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sin_out
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFI_out
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Off
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARC_out
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_out
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Select
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCW_Select
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACW_Select
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Range_Control
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
</UL>

<P><STRONG><a name="[1b6]"></a>jisuandianzu</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = jisuandianzu
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Result
</UL>

<P><STRONG><a name="[1b5]"></a>Get_Result</STRONG> (Thumb, 582 bytes, Stack size 24 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Get_Result &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jisuandianzu
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
</UL>

<P><STRONG><a name="[1bb]"></a>InputNum</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = InputNum &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Pre_Uint
</UL>

<P><STRONG><a name="[1bf]"></a>Disp_NumKeyboard_Set</STRONG> (Thumb, 748 bytes, Stack size 88 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Beep
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteString_16
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avg_Set_Num
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freq_Set_Num
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Set_CompNum
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Set_Num
</UL>

<P><STRONG><a name="[1c0]"></a>Disp_Pre_Uint</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Disp_Pre_Uint &rArr; InputNum &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNum
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Fastbutton
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_config_Process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
</UL>

<P><STRONG><a name="[1c1]"></a>disp_Inputnum</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = disp_Inputnum &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_config_Process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
</UL>

<P><STRONG><a name="[1c2]"></a>disp_DelayMSG</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = disp_DelayMSG &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_DelayTime
</UL>

<P><STRONG><a name="[1c3]"></a>Disp_DelayTime</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Disp_DelayTime &rArr; disp_DelayMSG &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SorftTime
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_DelayMSG
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_Format
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPause_Process
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Process
</UL>

<P><STRONG><a name="[1c5]"></a>Disp_Comp</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, use_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Disp_Comp &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPause_Process
</UL>

<P><STRONG><a name="[1c6]"></a>Disp_CompTest</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, use_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>

<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, key.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[19e]"></a>Beep_on</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Beep_on &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_beep
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepGap
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepCon
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Beep
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_Disp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_prompt
</UL>

<P><STRONG><a name="[1c8]"></a>Start_Lowdc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>

<P><STRONG><a name="[19f]"></a>Beep_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Beep_Off &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_beep
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepGap
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Beep
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_Disp
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPause_Process
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finsh_Process
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_prompt
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopT
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_WriteRegValue
</UL>

<P><STRONG><a name="[1ca]"></a>Pro_PlcOn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[1cb]"></a>Pro_Plcoff</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>

<P><STRONG><a name="[522]"></a>Bais_LedOn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>Bais_LedOff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[1cc]"></a>Lock_LedOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[1cd]"></a>Lock_LedOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lock_LedOff &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[1ce]"></a>Lock_Control_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>

<P><STRONG><a name="[1cf]"></a>Lock_Control_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[1a1]"></a>Pass_Led</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Pass_Led &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_Disp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_prompt
</UL>

<P><STRONG><a name="[19d]"></a>Fail_led</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_Disp
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_prompt
</UL>

<P><STRONG><a name="[1d0]"></a>All_LedOff</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = All_LedOff &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finsh_Process
</UL>

<P><STRONG><a name="[107]"></a>HV_Ledon</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HV_Ledon &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>HV_Ledoff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HV_Ledoff &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[523]"></a>Power_On_led</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>Power_Off_led</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abroat_Process
</UL>

<P><STRONG><a name="[1d1]"></a>Turnon_backlight</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[1d2]"></a>Turnoff_backlight</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>

<P><STRONG><a name="[184]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_beep
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepGap
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wlan_Rst
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Beep
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_UartClear
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MCP3202
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_cleardata
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Calibrate
</UL>

<P><STRONG><a name="[1d3]"></a>Wlan_Rst</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[1d4]"></a>Wlan_Cfg_L</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>

<P><STRONG><a name="[1d5]"></a>Wlan_Cfg_H</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[1d6]"></a>GPIO_WAN_Config</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>

<P><STRONG><a name="[1d8]"></a>GPIO_LPC_Configration</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_LPC_Configration &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[1d9]"></a>GPIO_Led_Configuration</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Led_Configuration &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[1da]"></a>GPIO_Key_Configuration</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Key_Configuration &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_keyInt
</UL>

<P><STRONG><a name="[1dc]"></a>_164Delaay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Sendvalueto164
</UL>

<P><STRONG><a name="[1db]"></a>HW_Sendvalueto164</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_Sendvalueto164 &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_164Delaay
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_keyInt
</UL>

<P><STRONG><a name="[1de]"></a>Key_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_keyInt
</UL>

<P><STRONG><a name="[1dd]"></a>HW_keyInt</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_keyInt &rArr; HW_Sendvalueto164 &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Sendvalueto164
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Key_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[1e0]"></a>HW_KeyScsn1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_KeyScsn
</UL>

<P><STRONG><a name="[1df]"></a>HW_KeyScsn</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HW_KeyScsn
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_KeyScsn1
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Key
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Process
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_compvalue
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fac_DebugProcess
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_StoreProcess
</UL>

<P><STRONG><a name="[1e1]"></a>Delay_Key</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_Key &rArr; HW_KeyScsn
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_KeyScsn
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Process
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abroat_Process
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_StoreProcess
</UL>

<P><STRONG><a name="[198]"></a>Key_Beep</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_Beep &rArr; Beep_on &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_on
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_NumKeyboard_Set
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_Setup
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListBox_Setup
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_SysSetProcess
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Process
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_config_Process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idem_Process
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abroat_Process
</UL>

<P><STRONG><a name="[1e2]"></a>BeepCon</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BeepCon &rArr; Beep_on &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_on
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPause_Process
</UL>

<P><STRONG><a name="[1e3]"></a>BeepGap</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BeepGap &rArr; Beep_on &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_on
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPause_Process
</UL>

<P><STRONG><a name="[1e4]"></a>Touch_beep</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_on
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Off
</UL>

<P><STRONG><a name="[1e7]"></a>Key_Read</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read_WithTimeOut
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abroat_Process
</UL>

<P><STRONG><a name="[197]"></a>Key_Read_WithTimeOut</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftTimer
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSoftTimerOut
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Num
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_Setup
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListBox_Setup
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gnd_Calibrate
</UL>

<P><STRONG><a name="[1e8]"></a>Key_Scan</STRONG> (Thumb, 192 bytes, Stack size 4 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_KeyScsn1
</UL>

<P><STRONG><a name="[5]"></a>SCPI_Write</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SCPI_Write &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.data)
</UL>
<P><STRONG><a name="[524]"></a>SCPI_Flush</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, test.o(.text), UNUSED)

<P><STRONG><a name="[525]"></a>SCPI_Error</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, test.o(.text), UNUSED)

<P><STRONG><a name="[526]"></a>SCPI_Control</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, test.o(.text), UNUSED)

<P><STRONG><a name="[527]"></a>SCPI_Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, test.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>SCPI_SystemCommTcpipControlQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, test.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>Power_Process</STRONG> (Thumb, 548 bytes, Stack size 40 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Power_Process &rArr; GUI_Init &rArr; WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM_BringToBottom &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_keyInt
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Led_Configuration
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_LPC_Configration
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_LedOff
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bais_LedOff
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sing_out_C
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pass_Led
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRB_out
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_on
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Off
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARC_out
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_out
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetData_High_Low_Comp
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDate_Comp
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCal
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSavedata
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearInt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DA_out
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteGPREG
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ResetClockTickCounter
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadGPREG
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Cmd
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGlobalValue
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_SetEncodeUTF8
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntCmd
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Int
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPLD_GPIO
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>Idem_Process</STRONG> (Thumb, 734 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Idem_Process &rArr; Disp_Idel_Item &rArr; GUI_DispDecAt &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Send
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sing_out_C
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Beep
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRB_out
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_out
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Range_Control
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IdelButton
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Time
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Testvalue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_Item
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_list
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_TestMSG
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DA_out
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>Abroat_Process</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Abroat_Process &rArr; ARC_out &rArr; Out_4094 &rArr; Set_Spi_out &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Key
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Off_led
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Beep
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARC_out
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Time
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_big_HZ
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>Finsh_Process</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Finsh_Process &rArr; Uart0_Send &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_LedOff
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Send
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sing_out_C
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRB_out
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Off
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_out
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Time
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_big_HZ
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DA_out
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>Test_Process</STRONG> (Thumb, 3166 bytes, Stack size 104 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = Test_Process &rArr; Disp_Testvalue &rArr; disp_TestMSG &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Send
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sing_out_C
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRB_out
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Off
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Result
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_out
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Range_Control
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Testvalue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_List
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DA_out
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ad
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_Filter
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>File_Process</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = File_Process &rArr; Delay_Key &rArr; HW_KeyScsn
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Key
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_KeyScsn
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>Setup_Process</STRONG> (Thumb, 21070 bytes, Stack size 64 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = Setup_Process &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Beep
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_Inputnum
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Pre_Uint
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDate_Comp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSet_value
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_Set_Item
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>Setup_config_Process</STRONG> (Thumb, 1964 bytes, Stack size 64 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = Setup_config_Process &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Beep
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_Inputnum
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Pre_Uint
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSetConfig_value
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_SetConfig_Item
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[209]"></a>Data_StoreProcess</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Key
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_KeyScsn
</UL>

<P><STRONG><a name="[f8]"></a>Sys_Process</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Sys_Process &rArr; DispSYSConfig_value &rArr; dispSYSButtonvalue &rArr; Disp_Fastbutton &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Beep
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Sys
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSYSConfig_value
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>Use_SysSetProcess</STRONG> (Thumb, 766 bytes, Stack size 56 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Use_SysSetProcess &rArr; Disp_SysSet_value &rArr; dispSYSSetButtonvalue &rArr; Disp_Fastbutton &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Beep
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDate_Comp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SysSet_value
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SYS_Set_Item
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteGPREG
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ResetClockTickCounter
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadGPREG
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Cmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20a]"></a>Fac_DebugProcess</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_KeyScsn
</UL>

<P><STRONG><a name="[20b]"></a>PackStandFrame</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[20c]"></a>Input_compvalue</STRONG> (Thumb, 1572 bytes, Stack size 144 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_KeyScsn
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_button_Num_Input
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Set_InputNum
</UL>

<P><STRONG><a name="[20e]"></a>Disp_Set_Num</STRONG> (Thumb, 74 bytes, Stack size 96 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_NumKeyboard_Set
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set_Cov
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_button_Num_time
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[20f]"></a>Disp_Set_CompNum</STRONG> (Thumb, 74 bytes, Stack size 96 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_NumKeyboard_Set
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Set_Cov
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_button_Num_Freq
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[210]"></a>Disp_Set_InputNum</STRONG> (Thumb, 76 bytes, Stack size 72 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Set_Cov
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_button_Num_Input
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_compvalue
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[211]"></a>Freq_Set_Num</STRONG> (Thumb, 42 bytes, Stack size 72 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_NumKeyboard_Set
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Value
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_button_Num_Freq
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[213]"></a>Avg_Set_Num</STRONG> (Thumb, 190 bytes, Stack size 104 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_NumKeyboard_Set
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freq_Set_Cov
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_button_Num_Avg
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[528]"></a>Set_daot</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, test.o(.text), UNUSED)

<P><STRONG><a name="[529]"></a>V_Test_Comp</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, test.o(.text), UNUSED)

<P><STRONG><a name="[52a]"></a>R_Test_Comp</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, test.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>Comp_prompt</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pass_Led
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fail_led
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_on
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Off
</UL>

<P><STRONG><a name="[215]"></a>Inttofloat</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[52b]"></a>Input_int</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, test.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>BCDtoInt</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[217]"></a>VBCDtoInt</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[218]"></a>V_BCD_Int</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_Format
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[219]"></a>BCD_Int</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_Format
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[21a]"></a>Debug_Res</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[21b]"></a>Write_Usbdata</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Write
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Open
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Close
</UL>

<P><STRONG><a name="[21c]"></a>Main_Read</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Read
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Open
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Close
</UL>

<P><STRONG><a name="[52c]"></a>Debug_jisuan</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, test.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>Fft_Dci</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[21e]"></a>Getberore_Res</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>

<P><STRONG><a name="[21f]"></a>Change_Disp_beforer</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[220]"></a>Change_Disp_r</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[222]"></a>Test_cleardata</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_big_HZ
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Range
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ADDA_SendByte
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_7192_Rest
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[fd]"></a>Start_Process</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Start_Process &rArr; Disp_DelayTime &rArr; disp_DelayMSG &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Send
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sing_out_C
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRB_out
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_DelayTime
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_out
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DA_out
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_OutProg
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftTimer
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSoftTimerOut
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>TestPause_Process</STRONG> (Thumb, 1200 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = TestPause_Process &rArr; Disp_Idel_Item &rArr; GUI_DispDecAt &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepGap
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepCon
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Send
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sing_out_C
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRB_out
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Off
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comp
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_DelayTime
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARC_out
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_out
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IdelButton
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_Item
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_TestMSG
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DA_out
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftTimer
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSoftTimerOut
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[226]"></a>LoadDefaultCalibrate</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, globalvalue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LoadDefaultCalibrate &rArr; SaveCal &rArr; EEPROM_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCal
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Calibrate
</UL>

<P><STRONG><a name="[1f0]"></a>InitGlobalValue</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, globalvalue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[52d]"></a>Check_Calibrate_Limit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, globalvalue.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>SetSoftTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, globalvalue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read_WithTimeOut
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPause_Process
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Process
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
</UL>

<P><STRONG><a name="[1e6]"></a>GetSoftTimerOut</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, globalvalue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read_WithTimeOut
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPause_Process
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Process
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
</UL>

<P><STRONG><a name="[1c4]"></a>Get_SorftTime</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, globalvalue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_DelayTime
</UL>

<P><STRONG><a name="[227]"></a>pwm_intt</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_MatchUpdate
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CounterCmd
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigMatch
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Cmd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ChannelConfig
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ChannelCmd
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Vout_vot
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_HV_Out
</UL>

<P><STRONG><a name="[230]"></a>Set_inport</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_da_ad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Receivedata
</UL>

<P><STRONG><a name="[224]"></a>SPI_ADDA_SendByte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, spi_da_ad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_adconfig
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_7192Config
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_7129_IO
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_value
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_7192_Rest
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_cleardata
</UL>

<P><STRONG><a name="[231]"></a>SPI3_Receivedata</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, spi_da_ad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_inport
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD_7192
</UL>

<P><STRONG><a name="[232]"></a>Send_value</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, spi_da_ad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ADDA_SendByte
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Vout
</UL>

<P><STRONG><a name="[233]"></a>Send_Vout</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, spi_da_ad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_value
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Vout_vot
</UL>

<P><STRONG><a name="[234]"></a>HV_Out_Gpioint</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, spi_da_ad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>

<P><STRONG><a name="[235]"></a>Discharge</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_da_ad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[236]"></a>Close_dischange</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_da_ad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>

<P><STRONG><a name="[237]"></a>Start_HV_Out</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi_da_ad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_intt
</UL>

<P><STRONG><a name="[238]"></a>Stop_Vout_vot</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, spi_da_ad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_intt
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[239]"></a>Start_Vout_vot</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, spi_da_ad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Vout
</UL>

<P><STRONG><a name="[23a]"></a>Read_AD_7192</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, spi_da_ad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Receivedata
</UL>

<P><STRONG><a name="[223]"></a>AD_7192_Rest</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, spi_da_ad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ADDA_SendByte
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_cleardata
</UL>

<P><STRONG><a name="[23b]"></a>AD_7129_IO</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spi_da_ad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ADDA_SendByte
</UL>

<P><STRONG><a name="[23c]"></a>AD_7192Config</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, spi_da_ad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ADDA_SendByte
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[23d]"></a>U_adconfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, spi_da_ad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ADDA_SendByte
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[1ec]"></a>V_DA_out</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, spi_da_ad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = V_DA_out &rArr; Set_Spi_out &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Spi_out
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Cpld_clk
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DA_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPause_Process
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Process
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idem_Process
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finsh_Process
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopT
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_WriteRegValue
</UL>

<P><STRONG><a name="[1a9]"></a>Out_4094</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, spi_da_ad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Out_4094 &rArr; Set_Spi_out &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Spi_out
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Cpld_clk
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD4094_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARC_out
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_out
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Select
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCW_Select
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACW_Select
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Range_Control
</UL>

<P><STRONG><a name="[242]"></a>Read_MCP3202</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, spi_da_ad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Read_MCP3202 &rArr; Set_Spi_out &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Spi_out
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Cpld_clk
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_CS
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ad_Ch1
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ad_Ch0
</UL>

<P><STRONG><a name="[244]"></a>Read_Ad_Ch0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_da_ad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Read_Ad_Ch0 &rArr; Read_MCP3202 &rArr; Set_Spi_out &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MCP3202
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ad
</UL>

<P><STRONG><a name="[245]"></a>Read_Ad_Ch1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_da_ad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Read_Ad_Ch1 &rArr; Read_MCP3202 &rArr; Set_Spi_out &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MCP3202
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ad
</UL>

<P><STRONG><a name="[203]"></a>Read_Ad</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, spi_da_ad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Read_Ad &rArr; Read_Ad_Ch1 &rArr; Read_MCP3202 &rArr; Set_Spi_out &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ad_Ch1
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ad_Ch0
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
</UL>

<P><STRONG><a name="[204]"></a>Ad_Filter</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, spi_da_ad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ad_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
</UL>

<P><STRONG><a name="[246]"></a>Key_Start_Stop_GPIO</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_Start_Stop_GPIO &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPLD_GPIO
</UL>

<P><STRONG><a name="[1e9]"></a>CPLD_GPIO</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CPLD_GPIO &rArr; Key_Start_Stop_GPIO &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Start_Stop_GPIO
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[247]"></a>Write_U211_574</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpld.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPLD_CS
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DA_CS
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD4094_CS
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_CS
</UL>

<P><STRONG><a name="[243]"></a>AD_CS</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AD_CS
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_U211_574
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MCP3202
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Int
</UL>

<P><STRONG><a name="[23e]"></a>DA_CS</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DA_CS
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_U211_574
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DA_out
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Int
</UL>

<P><STRONG><a name="[248]"></a>CPLD_CS</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CPLD_CS
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_U211_574
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cpld
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Int
</UL>

<P><STRONG><a name="[1fe]"></a>FMC_Int</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_Int &rArr; EMC_StaMemConfigPB
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPLD_CS
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DA_CS
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_CS
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_StaMemConfigPB
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_StaMemConfigMW
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_SetStaMemoryParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[250]"></a>Write_U212_574</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpld.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_OutPass
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_OutProg
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_OutFail
</UL>

<P><STRONG><a name="[240]"></a>Set_Cpld_clk</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Set_Cpld_clk &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_4094
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cpld
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MCP3202
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DA_out
</UL>

<P><STRONG><a name="[23f]"></a>Set_Spi_out</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Set_Spi_out &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_4094
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cpld
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MCP3202
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DA_out
</UL>

<P><STRONG><a name="[241]"></a>CD4094_CS</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CD4094_CS
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_U211_574
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_4094
</UL>

<P><STRONG><a name="[24c]"></a>Write_Cpld</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Write_Cpld &rArr; Set_Spi_out &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPLD_CS
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Spi_out
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Cpld_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sing_out_C
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sin_out
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFI_out
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRB_out
</UL>

<P><STRONG><a name="[1b3]"></a>Sing_out_C</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Sing_out_C &rArr; Write_Cpld &rArr; Set_Spi_out &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cpld
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPause_Process
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Process
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idem_Process
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finsh_Process
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sin_Clk_Disable
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sin_Clk_Enable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopT
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_WriteRegValue
</UL>

<P><STRONG><a name="[24d]"></a>Sin_Clk_Enable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sin_Clk_Enable &rArr; Sing_out_C &rArr; Write_Cpld &rArr; Set_Spi_out &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sing_out_C
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
</UL>

<P><STRONG><a name="[24e]"></a>Sin_Clk_Disable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cpld.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sing_out_C
</UL>

<P><STRONG><a name="[1b2]"></a>Sin_out</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Sin_out &rArr; Write_Cpld &rArr; Set_Spi_out &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cpld
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
</UL>

<P><STRONG><a name="[1b1]"></a>GFI_out</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GFI_out &rArr; Write_Cpld &rArr; Set_Spi_out &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cpld
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Process
</UL>

<P><STRONG><a name="[1ab]"></a>FRB_out</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FRB_out &rArr; Write_Cpld &rArr; Set_Spi_out &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cpld
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Select
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCW_Select
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACW_Select
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPause_Process
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Process
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idem_Process
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finsh_Process
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopT
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_WriteRegValue
</UL>

<P><STRONG><a name="[24f]"></a>PLC_OutPass</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, cpld.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_U212_574
</UL>

<P><STRONG><a name="[251]"></a>PLC_OutFail</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, cpld.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_U212_574
</UL>

<P><STRONG><a name="[225]"></a>PLC_OutProg</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, cpld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PLC_OutProg
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_U212_574
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Process
</UL>

<P><STRONG><a name="[252]"></a>Default_Calibrate</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Default_Calibrate &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultCalibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Process
</UL>

<P><STRONG><a name="[253]"></a>CalTest_Process</STRONG> (Thumb, 2202 bytes, Stack size 80 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = CalTest_Process &rArr; dispSetupButtonvalue &rArr; Disp_Fastbutton &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Send
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sin_out
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRB_out
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCW_Select
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACW_Select
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Range_Control
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCal
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispSetupButtonvalue
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_Format
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sin_Clk_Enable
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DA_out
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ad
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_Filter
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftTimer
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSoftTimerOut
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acw_Calibrate
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcw_Calibrate
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Calibrate
</UL>

<P><STRONG><a name="[254]"></a>Ir_Calibrate</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Ir_Calibrate &rArr; CalTest_Process &rArr; dispSetupButtonvalue &rArr; Disp_Fastbutton &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Process
</UL>

<P><STRONG><a name="[255]"></a>Dcw_Calibrate</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Dcw_Calibrate &rArr; CalTest_Process &rArr; dispSetupButtonvalue &rArr; Disp_Fastbutton &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Process
</UL>

<P><STRONG><a name="[256]"></a>Acw_Calibrate</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Acw_Calibrate &rArr; CalTest_Process &rArr; dispSetupButtonvalue &rArr; Disp_Fastbutton &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Process
</UL>

<P><STRONG><a name="[f5]"></a>Debug_Process</STRONG> (Thumb, 460 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Debug_Process &rArr; Acw_Calibrate &rArr; CalTest_Process &rArr; dispSetupButtonvalue &rArr; Disp_Fastbutton &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFI_out
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARC_out
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_out
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acw_Calibrate
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcw_Calibrate
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Calibrate
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Calibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[257]"></a>Gnd_Calibrate</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read_WithTimeOut
</UL>

<P><STRONG><a name="[258]"></a>UartRes</STRONG> (Thumb, 552 bytes, Stack size 136 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = UartRes &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRes
</UL>

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EEPROM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>MCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPIFI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SSP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[3ed]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[284]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 672 bytes, Stack size 0 bytes, system_lpc177x_8x.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetCLKDiv
</UL>

<P><STRONG><a name="[3c]"></a>SystemInit</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, system_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(.text)
</UL>
<P><STRONG><a name="[1d7]"></a>GPIO_SetDir</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc177x_8x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Key_Configuration
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Led_Configuration
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_LPC_Configration
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WAN_Config
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Start_Stop_GPIO
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HV_Out_Gpioint
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPLD_GPIO
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetDir
</UL>

<P><STRONG><a name="[1c7]"></a>GPIO_SetValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Sendvalueto164
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Key_Configuration
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WAN_Config
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wlan_Cfg_H
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wlan_Rst
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turnon_backlight
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_Control_Off
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_LedOn
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_PlcOn
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pass_Led
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fail_led
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_on
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HV_Ledon
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Spi_out
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Cpld_clk
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MCP3202
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_adconfig
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_7192Config
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Vout_vot
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discharge
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Receivedata
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_inport
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ADDA_SendByte
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_7192_Rest
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_cleardata
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetValue
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputValue
</UL>

<P><STRONG><a name="[1c9]"></a>GPIO_ClearValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Sendvalueto164
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wlan_Cfg_L
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wlan_Rst
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turnoff_backlight
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_LedOff
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_Control_On
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_LedOff
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Plcoff
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Lowdc
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pass_Led
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fail_led
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Off
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HV_Ledoff
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Spi_out
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Cpld_clk
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_adconfig
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_7192Config
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_7129_IO
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_HV_Out
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_dischange
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Receivedata
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ADDA_SendByte
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_7192_Rest
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_cleardata
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ClearValue
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputValue
</UL>

<P><STRONG><a name="[26e]"></a>GPIO_OutputValue</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[201]"></a>GPIO_ReadValue</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPause_Process
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idem_Process
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finsh_Process
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abroat_Process
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MCP3202
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Receivedata
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ReadValue
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acw_Calibrate
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcw_Calibrate
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Calibrate
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
</UL>

<P><STRONG><a name="[1fa]"></a>GPIO_IntCmd</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lpc177x_8x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_IntCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_IntCmd
</UL>

<P><STRONG><a name="[103]"></a>GPIO_GetIntStatus</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, lpc177x_8x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_GetIntStatus
</UL>

<P><STRONG><a name="[104]"></a>GPIO_ClearInt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lpc177x_8x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ClearInt
</UL>

<P><STRONG><a name="[26f]"></a>FIO_SetDir</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>

<P><STRONG><a name="[270]"></a>FIO_SetValue</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[271]"></a>FIO_ClearValue</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>

<P><STRONG><a name="[272]"></a>FIO_ReadValue</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>

<P><STRONG><a name="[273]"></a>FIO_IntCmd</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntCmd
</UL>

<P><STRONG><a name="[274]"></a>FIO_GetIntStatus</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetIntStatus
</UL>

<P><STRONG><a name="[275]"></a>FIO_ClearInt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearInt
</UL>

<P><STRONG><a name="[276]"></a>FIO_SetMask</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>

<P><STRONG><a name="[277]"></a>FIO_HalfWordSetDir</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[279]"></a>FIO_HalfWordSetMask</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[27a]"></a>FIO_HalfWordSetValue</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[27b]"></a>FIO_HalfWordClearValue</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[27c]"></a>FIO_HalfWordReadValue</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[27d]"></a>FIO_ByteSetDir</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[27f]"></a>FIO_ByteSetMask</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[280]"></a>FIO_ByteSetValue</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[281]"></a>FIO_ByteClearValue</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[282]"></a>FIO_ByteReadValue</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[283]"></a>CLKPWR_SetCLKDiv</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lpc177x_8x_clkpwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[ef]"></a>CLKPWR_GetCLK</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lpc177x_8x_clkpwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[288]"></a>CLKPWR_ConfigPPWR</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lpc177x_8x_clkpwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DeInit
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[52e]"></a>CLKPWR_Sleep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc177x_8x_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[52f]"></a>CLKPWR_DeepSleep</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc177x_8x_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[530]"></a>CLKPWR_PowerDown</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc177x_8x_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[531]"></a>CLKPWR_DeepPowerDown</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc177x_8x_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>UART_Init</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, lpc177x_8x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_init
</UL>

<P><STRONG><a name="[28a]"></a>UART_TxCmd</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
</UL>

<P><STRONG><a name="[289]"></a>UART_DeInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lpc177x_8x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
</UL>

<P><STRONG><a name="[2a3]"></a>UART_ConfigStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_init
</UL>

<P><STRONG><a name="[28c]"></a>UART_SendByte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>

<P><STRONG><a name="[28e]"></a>UART_ReceiveByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>

<P><STRONG><a name="[28b]"></a>UART_Send</STRONG> (Thumb, 152 bytes, Stack size 36 bytes, lpc177x_8x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[28d]"></a>UART_Receive</STRONG> (Thumb, 114 bytes, Stack size 28 bytes, lpc177x_8x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetValue
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetChar
</UL>

<P><STRONG><a name="[532]"></a>UART_ForceBreak</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>UART_IntConfig</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, lpc177x_8x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_init
</UL>

<P><STRONG><a name="[2a6]"></a>UART_GetLineStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[533]"></a>UART_GetIntId</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(.text), UNUSED)

<P><STRONG><a name="[534]"></a>UART_CheckBusy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(.text), UNUSED)

<P><STRONG><a name="[535]"></a>UART_FIFOConfig</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(.text), UNUSED)

<P><STRONG><a name="[536]"></a>UART_FIFOConfigStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(.text), UNUSED)

<P><STRONG><a name="[537]"></a>UART_ABCmd</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, lpc177x_8x_uart.o(.text), UNUSED)

<P><STRONG><a name="[538]"></a>UART_ABClearIntPending</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(.text), UNUSED)

<P><STRONG><a name="[539]"></a>UART_IrDAInvtInputCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(.text), UNUSED)

<P><STRONG><a name="[53a]"></a>UART_IrDACmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(.text), UNUSED)

<P><STRONG><a name="[53b]"></a>UART_IrDAPulseDivConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lpc177x_8x_uart.o(.text), UNUSED)

<P><STRONG><a name="[53c]"></a>UART_FullModemForcePinState</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, lpc177x_8x_uart.o(.text), UNUSED)

<P><STRONG><a name="[53d]"></a>UART_FullModemConfigMode</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, lpc177x_8x_uart.o(.text), UNUSED)

<P><STRONG><a name="[53e]"></a>UART_FullModemGetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(.text), UNUSED)

<P><STRONG><a name="[53f]"></a>UART_RS485Config</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(.text), UNUSED)

<P><STRONG><a name="[540]"></a>UART_RS485ReceiverCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>UART_RS485Send</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lpc177x_8x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485SendData
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485SendSlvAddr
</UL>

<P><STRONG><a name="[290]"></a>UART_RS485SendSlvAddr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lpc177x_8x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[291]"></a>UART_RS485SendData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpc177x_8x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[183]"></a>UARTPutChar</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Send
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_UartClear
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Write
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendWithCRC
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex32
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex32_
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex16
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex16_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex_
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutDec32
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutDec16
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutDec
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetValue
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[292]"></a>UARTGetChar</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UARTGetChar &rArr; UART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[293]"></a>UARTPuts</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex32
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex16
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts_
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[294]"></a>UARTGetValue</STRONG> (Thumb, 348 bytes, Stack size 64 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = UARTGetValue &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[295]"></a>UARTPuts_</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UARTPuts_ &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[296]"></a>UARTPutDec</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UARTPutDec &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[297]"></a>UARTPutDec16</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UARTPutDec16 &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[298]"></a>UARTPutDec32</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UARTPutDec32 &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[299]"></a>UARTPutHex_</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UARTPutHex_ &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[29a]"></a>UARTPutHex</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UARTPutHex &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[29b]"></a>UARTPutHex16_</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UARTPutHex16_ &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[29c]"></a>UARTPutHex16</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UARTPutHex16 &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[29d]"></a>UARTPutHex32_</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UARTPutHex32_ &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[29e]"></a>UARTPutHex32</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UARTPutHex32 &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[2a0]"></a>CRC16</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendWithCRC
</UL>

<P><STRONG><a name="[29f]"></a>MODS_SendWithCRC</STRONG> (Thumb, 76 bytes, Stack size 152 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = MODS_SendWithCRC &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_03H
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendAckOk
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendAckErr
</UL>

<P><STRONG><a name="[2aa]"></a>BEBufToUint16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, debug_frmwrk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_03H
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_06H
</UL>

<P><STRONG><a name="[1ea]"></a>debug_frmwrk_init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = debug_frmwrk_init &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigStructInit
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[1eb]"></a>Uart3_init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Uart3_init &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigStructInit
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[541]"></a>Uart0RecTimeOut</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, debug_frmwrk.o(.text), UNUSED)

<P><STRONG><a name="[542]"></a>Uart_Process</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, debug_frmwrk.o(.text), UNUSED)

<P><STRONG><a name="[18]"></a>UART0_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART3_IRQHandler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = UART3_IRQHandler &rArr; SCPI_Input &rArr; SCPI_Parse &rArr; findCommandHeader &rArr; matchCommand &rArr; matchPattern &rArr; compareStrAndNum &rArr; strBaseToInt32 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Input
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendAckOk
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1b4]"></a>Uart0_Send</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Uart0_Send &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPause_Process
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idem_Process
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finsh_Process
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopT
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartT
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_WriteRegValue
</UL>

<P><STRONG><a name="[106]"></a>RecHandle</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = RecHandle &rArr; MODS_03H &rArr; MODS_SendWithCRC &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_03H
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_06H
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_Poll
</UL>

<P><STRONG><a name="[229]"></a>PINSEL_ConfigPin</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc177x_8x_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_intt
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_init
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_Init
</UL>

<P><STRONG><a name="[2ae]"></a>PINSEL_SetPinMode</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc177x_8x_pinsel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>

<P><STRONG><a name="[2af]"></a>PINSEL_SetHysMode</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lpc177x_8x_pinsel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>

<P><STRONG><a name="[2b0]"></a>PINSEL_SetSlewMode</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lpc177x_8x_pinsel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>

<P><STRONG><a name="[2b1]"></a>PINSEL_SetInBufMode</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lpc177x_8x_pinsel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>

<P><STRONG><a name="[2b2]"></a>PINSEL_SetI2CMode</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lpc177x_8x_pinsel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>

<P><STRONG><a name="[2b3]"></a>PINSEL_SetOpenDrainMode</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lpc177x_8x_pinsel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>

<P><STRONG><a name="[2b4]"></a>PINSEL_SetAnalogPinMode</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lpc177x_8x_pinsel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>

<P><STRONG><a name="[2b5]"></a>PINSEL_DacEnable</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lpc177x_8x_pinsel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>

<P><STRONG><a name="[2b6]"></a>PINSEL_SetFilter</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lpc177x_8x_pinsel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>

<P><STRONG><a name="[f0]"></a>EEPROM_Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lpc177x_8x_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EEPROM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18e]"></a>EEPROM_Write</STRONG> (Thumb, 238 bytes, Stack size 20 bytes, lpc177x_8x_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EEPROM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCal
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
</UL>

<P><STRONG><a name="[191]"></a>EEPROM_Read</STRONG> (Thumb, 224 bytes, Stack size 20 bytes, lpc177x_8x_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EEPROM_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCal
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSavedata
</UL>

<P><STRONG><a name="[543]"></a>EEPROM_Erase</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, lpc177x_8x_eeprom.o(.text), UNUSED)

<P><STRONG><a name="[544]"></a>EEPROM_PowerDown</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc177x_8x_eeprom.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>RTC_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lpc177x_8x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_SysSetProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[2b7]"></a>RTC_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lpc177x_8x_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>

<P><STRONG><a name="[1f8]"></a>RTC_ResetClockTickCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc177x_8x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_SysSetProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[1f9]"></a>RTC_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc177x_8x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_SysSetProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[545]"></a>RTC_CntIncrIntConfig</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, lpc177x_8x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[546]"></a>RTC_AlarmIntConfig</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, lpc177x_8x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[547]"></a>RTC_SetTime</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, lpc177x_8x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[548]"></a>RTC_GetTime</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, lpc177x_8x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[549]"></a>RTC_SetFullTime</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lpc177x_8x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>RTC_GetFullTime</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lpc177x_8x_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Set_Time
</UL>

<P><STRONG><a name="[54a]"></a>RTC_SetAlarmTime</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, lpc177x_8x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[54b]"></a>RTC_GetAlarmTime</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, lpc177x_8x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[54c]"></a>RTC_SetFullAlarmTime</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lpc177x_8x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[54d]"></a>RTC_GetFullAlarmTime</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lpc177x_8x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[54e]"></a>RTC_GetIntPending</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[54f]"></a>RTC_ClearIntPending</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc177x_8x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[550]"></a>RTC_CalibCounterCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc177x_8x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[551]"></a>RTC_CalibConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lpc177x_8x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>RTC_WriteGPREG</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lpc177x_8x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WriteGPREG
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_SysSetProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[1f5]"></a>RTC_ReadGPREG</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lpc177x_8x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ReadGPREG
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_SysSetProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[2b8]"></a>PWM_GetIntStatus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lpc177x_8x_pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
</UL>

<P><STRONG><a name="[2ba]"></a>PWM_ClearIntPending</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lpc177x_8x_pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
</UL>

<P><STRONG><a name="[552]"></a>PWM_ConfigStructInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lpc177x_8x_pwm.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>PWM_Init</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, lpc177x_8x_pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_intt
</UL>

<P><STRONG><a name="[2bb]"></a>PWM_DeInit</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lpc177x_8x_pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
</UL>

<P><STRONG><a name="[22e]"></a>PWM_Cmd</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lpc177x_8x_pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_intt
</UL>

<P><STRONG><a name="[22d]"></a>PWM_CounterCmd</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lpc177x_8x_pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_intt
</UL>

<P><STRONG><a name="[2bc]"></a>PWM_ResetCounter</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lpc177x_8x_pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
</UL>

<P><STRONG><a name="[22b]"></a>PWM_ConfigMatch</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, lpc177x_8x_pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_intt
</UL>

<P><STRONG><a name="[2bd]"></a>PWM_ConfigCapture</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, lpc177x_8x_pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
</UL>

<P><STRONG><a name="[2be]"></a>PWM_GetCaptureValue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lpc177x_8x_pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
</UL>

<P><STRONG><a name="[22a]"></a>PWM_MatchUpdate</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lpc177x_8x_pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_intt
</UL>

<P><STRONG><a name="[22c]"></a>PWM_ChannelConfig</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lpc177x_8x_pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_intt
</UL>

<P><STRONG><a name="[22f]"></a>PWM_ChannelCmd</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lpc177x_8x_pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_intt
</UL>

<P><STRONG><a name="[2bf]"></a>EMC_Init</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[553]"></a>EMC_ConfigEndianMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc177x_8x_emc.o(.text), UNUSED)

<P><STRONG><a name="[554]"></a>EMC_DynCtrlClockEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc177x_8x_emc.o(.text), UNUSED)

<P><STRONG><a name="[555]"></a>EMC_DynCtrlClockControl</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc177x_8x_emc.o(.text), UNUSED)

<P><STRONG><a name="[556]"></a>EMC_DynCtrlSelfRefresh</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc177x_8x_emc.o(.text), UNUSED)

<P><STRONG><a name="[557]"></a>EMC_DynCtrlMMC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc177x_8x_emc.o(.text), UNUSED)

<P><STRONG><a name="[558]"></a>EMC_DynCtrlSDRAMInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc177x_8x_emc.o(.text), UNUSED)

<P><STRONG><a name="[559]"></a>EMC_DynCtrlPowerDownMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc177x_8x_emc.o(.text), UNUSED)

<P><STRONG><a name="[55a]"></a>EMC_SetDynMemoryParameter</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, lpc177x_8x_emc.o(.text), UNUSED)

<P><STRONG><a name="[55b]"></a>EMC_StaticExtendedWait</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc177x_8x_emc.o(.text), UNUSED)

<P><STRONG><a name="[55c]"></a>EMC_DynMemConfigMD</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(.text), UNUSED)

<P><STRONG><a name="[55d]"></a>EMC_DynMemConfigAM</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(.text), UNUSED)

<P><STRONG><a name="[55e]"></a>EMC_DynMemConfigB</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(.text), UNUSED)

<P><STRONG><a name="[55f]"></a>EMC_DynMemConfigP</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(.text), UNUSED)

<P><STRONG><a name="[560]"></a>EMC_DynMemRAS</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(.text), UNUSED)

<P><STRONG><a name="[561]"></a>EMC_DynMemCAS</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>EMC_StaMemConfigMW</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EMC_StaMemConfigMW
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Int
</UL>

<P><STRONG><a name="[562]"></a>EMC_StaMemConfigPM</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(.text), UNUSED)

<P><STRONG><a name="[563]"></a>EMC_StaMemConfigPC</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>EMC_StaMemConfigPB</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EMC_StaMemConfigPB
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Int
</UL>

<P><STRONG><a name="[564]"></a>EMC_StaMemConfigEW</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(.text), UNUSED)

<P><STRONG><a name="[565]"></a>EMC_StaMemConfigB</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(.text), UNUSED)

<P><STRONG><a name="[566]"></a>EMC_StaMemConfigpP</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>EMC_SetStaMemoryParameter</STRONG> (Thumb, 294 bytes, Stack size 0 bytes, lpc177x_8x_emc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Int
</UL>

<P><STRONG><a name="[2c4]"></a>FAT_GetFATType</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
</UL>

<P><STRONG><a name="[2c0]"></a>FAT_Init</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE32U
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE16U
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetFATType
</UL>

<P><STRONG><a name="[2c5]"></a>FAT_PutSFN</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_CreateEntry
</UL>

<P><STRONG><a name="[2c8]"></a>FAT_ChkEntType</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_FindEntry
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetFreeEntry
</UL>

<P><STRONG><a name="[2c7]"></a>FAT_GetFreeEntry</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_ChkEntType
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_CreateEntry
</UL>

<P><STRONG><a name="[2cd]"></a>FAT_StrCaseCmp</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_FindEntry
</UL>

<P><STRONG><a name="[2cb]"></a>FAT_GetSfnExt</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetSFN
</UL>

<P><STRONG><a name="[2ca]"></a>FAT_GetSfnName</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetSFN
</UL>

<P><STRONG><a name="[2c9]"></a>FAT_GetSFN</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetSfnName
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetSfnExt
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_FindEntry
</UL>

<P><STRONG><a name="[2cc]"></a>FAT_FindEntry</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE32U
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE16U
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetSFN
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_StrCaseCmp
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_ChkEntType
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Open
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_CreateEntry
</UL>

<P><STRONG><a name="[2ce]"></a>FAT_CreateEntry</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_FindEntry
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetFreeEntry
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_PutSFN
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Open
</UL>

<P><STRONG><a name="[ff]"></a>FILE_Open</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_CreateEntry
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_FindEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Write
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Read
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Usbdata
</UL>

<P><STRONG><a name="[2cf]"></a>FAT_ClusRead</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Read
</UL>

<P><STRONG><a name="[2d0]"></a>FAT_GetNextClus</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE16U
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Read
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetEndClus
</UL>

<P><STRONG><a name="[100]"></a>FILE_Read</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetNextClus
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_ClusRead
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Write
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Read
</UL>

<P><STRONG><a name="[2d1]"></a>FAT_UpdateFAT</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE16U
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Write
</UL>

<P><STRONG><a name="[2d3]"></a>FAT_GetFreeClus</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE16U
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Write
</UL>

<P><STRONG><a name="[2d4]"></a>FAT_ClusWrite</STRONG> (Thumb, 304 bytes, Stack size 64 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Write
</UL>

<P><STRONG><a name="[2d5]"></a>FAT_GetEndClus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetNextClus
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Write
</UL>

<P><STRONG><a name="[101]"></a>FILE_Write</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE16U
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetEndClus
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_ClusWrite
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetFreeClus
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_UpdateFAT
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Write
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Usbdata
</UL>

<P><STRONG><a name="[2d6]"></a>FAT_UpdateEntry</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE32U
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>

<P><STRONG><a name="[102]"></a>FILE_Close</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE32U
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Write
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Read
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Usbdata
</UL>

<P><STRONG><a name="[2d9]"></a>Host_DelayUS</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Host_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayMS
</UL>

<P><STRONG><a name="[2d8]"></a>Host_DelayMS</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Host_DelayMS &rArr; Host_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[2dc]"></a>Host_HCCAInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
</UL>

<P><STRONG><a name="[2db]"></a>Host_TDInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
</UL>

<P><STRONG><a name="[2da]"></a>Host_EDInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
</UL>

<P><STRONG><a name="[1f3]"></a>Host_Init</STRONG> (Thumb, 386 bytes, Stack size 12 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Host_Init &rArr; Host_DelayMS &rArr; Host_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EDInit
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_TDInit
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_HCCAInit
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[2b]"></a>USB_IRQHandler</STRONG> (Thumb, 386 bytes, Stack size 0 bytes, usbhost_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2de]"></a>Host_WDHWait</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>

<P><STRONG><a name="[2dd]"></a>Host_ProcessTD</STRONG> (Thumb, 328 bytes, Stack size 28 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Host_ProcessTD
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_WDHWait
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_TestUnitReady
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetSenseInfo
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Inquire
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlSend
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>

<P><STRONG><a name="[2d2]"></a>WriteLE16U</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Write
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_FillSetup
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_UpdateFAT
</UL>

<P><STRONG><a name="[2df]"></a>Host_FillSetup</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlSend
</UL>

<P><STRONG><a name="[2e0]"></a>Host_CtrlSend</STRONG> (Thumb, 98 bytes, Stack size 36 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Host_CtrlSend &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_FillSetup
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[2c2]"></a>ReadLE16U</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ParseConfiguration
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetFreeClus
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetNextClus
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_FindEntry
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
</UL>

<P><STRONG><a name="[2e1]"></a>Host_CtrlRecv</STRONG> (Thumb, 98 bytes, Stack size 36 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_FillSetup
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetMaxLUN
</UL>

<P><STRONG><a name="[1f4]"></a>Host_EnumDev</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Host_EnumDev &rArr; Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ParseConfiguration
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlSend
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayMS
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[2c3]"></a>ReadLE32U</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbhost_lpc17xx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_FindEntry
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
</UL>

<P><STRONG><a name="[2d7]"></a>WriteLE32U</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, usbhost_lpc17xx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Close
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_UpdateEntry
</UL>

<P><STRONG><a name="[2e8]"></a>ReadBE32U</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbhost_lpc17xx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
</UL>

<P><STRONG><a name="[2e4]"></a>WriteBE32U</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, usbhost_lpc17xx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>

<P><STRONG><a name="[567]"></a>ReadBE16U</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbhost_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>WriteBE16U</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, usbhost_lpc17xx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>

<P><STRONG><a name="[2e3]"></a>Fill_MSCommand</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, usbhost_ms.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBE16U
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBE32U
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE32U
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_TestUnitReady
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetSenseInfo
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Inquire
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>

<P><STRONG><a name="[2e6]"></a>MS_Inquire</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, usbhost_ms.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[2e7]"></a>MS_ReadCapacity</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, usbhost_ms.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBE32U
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[2e9]"></a>MS_GetSenseInfo</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usbhost_ms.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[2ea]"></a>MS_TestUnitReady</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbhost_ms.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[2eb]"></a>MS_GetMaxLUN</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbhost_ms.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[2ec]"></a>MS_Init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usbhost_ms.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetMaxLUN
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_TestUnitReady
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetSenseInfo
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Inquire
</UL>

<P><STRONG><a name="[2e2]"></a>MS_ParseConfiguration</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, usbhost_ms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MS_ParseConfiguration &rArr; ReadLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[2c1]"></a>MS_BulkRecv</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, usbhost_ms.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Close
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_UpdateEntry
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_ClusWrite
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetFreeClus
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_UpdateFAT
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetNextClus
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_ClusRead
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_FindEntry
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetFreeEntry
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_PutSFN
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
</UL>

<P><STRONG><a name="[2c6]"></a>MS_BulkSend</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, usbhost_ms.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Close
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_UpdateEntry
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_ClusWrite
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_UpdateFAT
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_PutSFN
</UL>

<P><STRONG><a name="[2ed]"></a>GUI_X_Config</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, guiconf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_X_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefaultFont
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_SetAvBlockSize
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AssignMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[2f6]"></a>LCD_X_Config</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, lcdconf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LCD_X_Config &rArr; GUI_DEVICE_CreateAndLink &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVRAMAddrEx
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPosEx
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[2fa]"></a>LCD_X_DisplayDriver</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lcdconf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_X_DisplayDriver &rArr; _InitController &rArr; LCD_SetVSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitController
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDisplayOrigin
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowBuffer
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVis
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAMAddr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetChromaMode
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetChroma
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlphaMode
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlpha
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_On
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Off
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
</UL>

<P><STRONG><a name="[568]"></a>GUI_X_GetTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_x.o(.text), UNUSED)

<P><STRONG><a name="[569]"></a>GUI_X_Delay</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_x.o(.text), UNUSED)

<P><STRONG><a name="[451]"></a>GUI_X_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[8]"></a>GUI_X_ExecIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> gui_waitevent.o(.data)
</UL>
<P><STRONG><a name="[421]"></a>GUI_X_InitOS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
</UL>

<P><STRONG><a name="[469]"></a>GUI_X_Unlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
</UL>

<P><STRONG><a name="[457]"></a>GUI_X_Lock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[456]"></a>GUI_X_GetTaskId</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTaskNo
</UL>

<P><STRONG><a name="[56a]"></a>GUI_X_Log</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x.o(.text), UNUSED)

<P><STRONG><a name="[56b]"></a>GUI_X_Warn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x.o(.text), UNUSED)

<P><STRONG><a name="[56c]"></a>GUI_X_ErrorOut</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>SCPI_ErrorInit</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCPI_ErrorInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Init
</UL>

<P><STRONG><a name="[2fe]"></a>SCPI_ErrorCount</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCPI_ErrorCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_count
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_SystemErrorCountQ
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorEmitEmpty
</UL>

<P><STRONG><a name="[305]"></a>SCPI_ErrorClear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCPI_ErrorClear &rArr; SCPI_ErrorEmitEmpty &rArr; SCPI_RegClearBits &rArr;  SCPI_RegSet (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_clear
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorEmitEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreCls
</UL>

<P><STRONG><a name="[307]"></a>SCPI_ErrorPop</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCPI_ErrorPop &rArr; SCPI_ErrorEmitEmpty &rArr; SCPI_RegClearBits &rArr;  SCPI_RegSet (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_remove
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorEmitEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_SystemErrorNextQ
</UL>

<P><STRONG><a name="[30c]"></a>SCPI_ErrorPushEx</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSetBits
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSD_strnlen
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorAddInternal
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorEmit
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parse
</UL>

<P><STRONG><a name="[30e]"></a>SCPI_ErrorPush</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPushEx
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parameter
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamNumber
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamFloat
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamDouble
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamCopyText
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamChoice
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamCharacters
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamBool
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamArbitraryBlock
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ExprChannelListEntry
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToDouble
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ExprNumericListEntry
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Input
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transformNumber
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToChoice
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToFloat
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArbitraryBlockData
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parse
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produceResultArrayBinary
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignUInt64
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignUInt32
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignToUInt64
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignToUInt32
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCommand
</UL>

<P><STRONG><a name="[374]"></a>SCPI_ErrorTranslate</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultError
</UL>

<P><STRONG><a name="[312]"></a>SCPI_ExprNumericListEntry</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, expression.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_IsEos
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_Comma
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numericRange
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ExprNumericListEntryDouble
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ExprNumericListEntryInt
</UL>

<P><STRONG><a name="[315]"></a>SCPI_ExprNumericListEntryInt</STRONG> (Thumb, 86 bytes, Stack size 72 bytes, expression.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToInt32
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ExprNumericListEntry
</UL>

<P><STRONG><a name="[317]"></a>SCPI_ExprNumericListEntryDouble</STRONG> (Thumb, 86 bytes, Stack size 72 bytes, expression.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToDouble
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ExprNumericListEntry
</UL>

<P><STRONG><a name="[26c]"></a>SCPI_ExprChannelListEntry</STRONG> (Thumb, 252 bytes, Stack size 88 bytes, expression.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SCPI_ExprChannelListEntry &rArr; channelRange &rArr; channelSpec &rArr; SCPI_ParamToInt32 &rArr; ParamSignToUInt32 &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_SpecificCharacter
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_IsEos
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_Comma
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channelRange
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Chanlst
</UL>

<P><STRONG><a name="[2fd]"></a>fifo_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorInit
</UL>

<P><STRONG><a name="[306]"></a>fifo_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorClear
</UL>

<P><STRONG><a name="[31d]"></a>fifo_is_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_remove_last
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_remove
</UL>

<P><STRONG><a name="[31c]"></a>fifo_is_full</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_add
</UL>

<P><STRONG><a name="[30a]"></a>fifo_add</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_add
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_is_full
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorAddInternal
</UL>

<P><STRONG><a name="[308]"></a>fifo_remove</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPop
</UL>

<P><STRONG><a name="[30b]"></a>fifo_remove_last</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_remove_last
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorAddInternal
</UL>

<P><STRONG><a name="[2ff]"></a>fifo_count</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorCount
</UL>

<P><STRONG><a name="[301]"></a>SCPI_RegGet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ieee488.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_StatusQuestionableEventQ
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_StatusQuestionableEnableQ
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreStbQ
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreSreQ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreEsrQ
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreEseQ
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_StatusOperationEnableQ
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_StatusOperationEventQ
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_StatusOperationConditionQ
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_StatusQuestionableConditionQ
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSet
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regUpdate
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regUpdateSTB
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regUpdateEvent
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSetBits
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegClearBits
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorEmitEmpty
</UL>

<P><STRONG><a name="[302]"></a>SCPI_RegClearBits</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ieee488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = SCPI_RegClearBits &rArr;  SCPI_RegSet (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSet
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegGet
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regUpdateSTB
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorEmitEmpty
</UL>

<P><STRONG><a name="[304]"></a>SCPI_RegSetBits</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ieee488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSet
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegGet
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreOpc
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regUpdateSTB
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPushEx
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorEmit
</UL>

<P><STRONG><a name="[31f]"></a>SCPI_RegSet</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, ieee488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regUpdate
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regUpdateSTB
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regUpdateEvent
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeControl
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegGet
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_StatusQuestionableEventQ
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_StatusQuestionableEnable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_StatusPreset
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreSre
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreEsrQ
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreEse
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreCls
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_StatusOperationEnable
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_StatusOperationEventQ
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_EventClear
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regUpdate
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regUpdateEvent
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSetBits
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegClearBits
</UL>

<P><STRONG><a name="[323]"></a>SCPI_EventClear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ieee488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SCPI_EventClear &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSet
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreCls
</UL>

<P><STRONG><a name="[62]"></a>SCPI_CoreCls</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ieee488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SCPI_CoreCls &rArr; SCPI_EventClear &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_EventClear
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSet
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>SCPI_CoreEse</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ieee488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SCPI_CoreEse &rArr; SCPI_ParamInt32 &rArr; ParamSignUInt32 &rArr; SCPI_Parameter &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamInt32
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>SCPI_CoreEseQ</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ieee488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SCPI_CoreEseQ &rArr; SCPI_ResultInt32 &rArr; resultUInt32BaseSign &rArr; UInt32ToStrBaseSign &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>SCPI_CoreEsrQ</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ieee488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SCPI_CoreEsrQ &rArr; SCPI_ResultInt32 &rArr; resultUInt32BaseSign &rArr; UInt32ToStrBaseSign &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSet
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>SCPI_CoreIdnQ</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ieee488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SCPI_CoreIdnQ &rArr; SCPI_ResultCharacters &rArr; writeDelimiter &rArr; writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>SCPI_CoreOpc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ieee488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SCPI_CoreOpc &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>SCPI_CoreOpcQ</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ieee488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SCPI_CoreOpcQ &rArr; SCPI_ResultInt32 &rArr; resultUInt32BaseSign &rArr; UInt32ToStrBaseSign &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>SCPI_CoreRst</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ieee488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCPI_CoreRst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>SCPI_CoreSre</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ieee488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SCPI_CoreSre &rArr; SCPI_ParamInt32 &rArr; ParamSignUInt32 &rArr; SCPI_Parameter &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamInt32
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>SCPI_CoreSreQ</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ieee488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SCPI_CoreSreQ &rArr; SCPI_ResultInt32 &rArr; resultUInt32BaseSign &rArr; UInt32ToStrBaseSign &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>SCPI_CoreStbQ</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ieee488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SCPI_CoreStbQ &rArr; SCPI_ResultInt32 &rArr; resultUInt32BaseSign &rArr; UInt32ToStrBaseSign &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[325]"></a>SCPI_CoreTstQ</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ieee488.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
</UL>

<P><STRONG><a name="[6e]"></a>SCPI_CoreWai</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ieee488.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[314]"></a>scpiLex_IsEos</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scpiLex_IsEos
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ExprChannelListEntry
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ExprNumericListEntry
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_detectProgramMessageUnit
</UL>

<P><STRONG><a name="[335]"></a>scpiLex_WhiteSpace</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = scpiLex_WhiteSpace &rArr; skipWs
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipWs
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamNumber
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_detectProgramMessageUnit
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_parseProgramData
</UL>

<P><STRONG><a name="[338]"></a>scpiLex_ProgramHeader</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = scpiLex_ProgramHeader &rArr; skipCompoundProgramHeader &rArr; skipProgramMnemonic &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipCompoundProgramHeader
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipCommonProgramHeader
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipChr
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_detectProgramMessageUnit
</UL>

<P><STRONG><a name="[339]"></a>scpiLex_CharacterProgramData</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scpiLex_CharacterProgramData &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ischr
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamNumber
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_parseProgramData
</UL>

<P><STRONG><a name="[310]"></a>scpiLex_DecimalNumericProgramData</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = scpiLex_DecimalNumericProgramData &rArr; skipExponent &rArr; skipNumbers &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipExponent
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipMantisa
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipWs
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamNumber
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channelSpec
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numericRange
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_parseProgramData
</UL>

<P><STRONG><a name="[33d]"></a>scpiLex_SuffixProgramData</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scpiLex_SuffixProgramData &rArr; skipAlpha &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipSlashDot
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipChr
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipAlpha
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipDigit
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamNumber
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_parseProgramData
</UL>

<P><STRONG><a name="[343]"></a>scpiLex_NondecimalNumericData</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scpiLex_NondecimalNumericData &rArr; skipHexNum &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipBinNum
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipOctNum
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipHexNum
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipChr
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isQ
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isB
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isH
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_parseProgramData
</UL>

<P><STRONG><a name="[34b]"></a>scpiLex_StringProgramData</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scpiLex_StringProgramData &rArr; skipSingleQuoteProgramData &rArr; skipQuoteProgramData
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipSingleQuoteProgramData
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipDoubleQuoteProgramData
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ischr
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_parseProgramData
</UL>

<P><STRONG><a name="[34d]"></a>scpiLex_ArbitraryBlockProgramData</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = scpiLex_ArbitraryBlockProgramData &rArr; isNonzeroDigit &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isNonzeroDigit
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipChr
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_parseProgramData
</UL>

<P><STRONG><a name="[350]"></a>scpiLex_ProgramExpression</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scpiLex_ProgramExpression &rArr; skipProgramExpression
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipProgramExpression
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ischr
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_parseProgramData
</UL>

<P><STRONG><a name="[313]"></a>scpiLex_Comma</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = scpiLex_Comma &rArr; skipChr
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipChr
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parameter
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ExprChannelListEntry
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ExprNumericListEntry
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_parseAllProgramData
</UL>

<P><STRONG><a name="[351]"></a>scpiLex_Semicolon</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = scpiLex_Semicolon &rArr; skipChr
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipChr
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_detectProgramMessageUnit
</UL>

<P><STRONG><a name="[311]"></a>scpiLex_Colon</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = scpiLex_Colon &rArr; skipChr
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipChr
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channelRange
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numericRange
</UL>

<P><STRONG><a name="[31a]"></a>scpiLex_SpecificCharacter</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = scpiLex_SpecificCharacter &rArr; skipChr
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipChr
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ExprChannelListEntry
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channelSpec
</UL>

<P><STRONG><a name="[352]"></a>scpiLex_NewLine</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = scpiLex_NewLine &rArr; skipChr
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipChr
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_detectProgramMessageUnit
</UL>

<P><STRONG><a name="[56d]"></a>SCPI_Stub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, minimal.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>SCPI_StubQ</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, minimal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SCPI_StubQ &rArr; SCPI_ResultInt32 &rArr; resultUInt32BaseSign &rArr; UInt32ToStrBaseSign &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>SCPI_SystemVersionQ</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, minimal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SCPI_SystemVersionQ &rArr; SCPI_ResultCharacters &rArr; writeDelimiter &rArr; writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>SCPI_SystemErrorNextQ</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, minimal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SCPI_SystemErrorNextQ &rArr; SCPI_ResultError &rArr; SCPI_ResultInt32 &rArr; resultUInt32BaseSign &rArr; UInt32ToStrBaseSign &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultError
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>SCPI_SystemErrorCountQ</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, minimal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SCPI_SystemErrorCountQ &rArr; SCPI_ResultInt32 &rArr; resultUInt32BaseSign &rArr; UInt32ToStrBaseSign &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[354]"></a>SCPI_StatusQuestionableConditionQ</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, minimal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegGet
</UL>

<P><STRONG><a name="[72]"></a>SCPI_StatusQuestionableEventQ</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, minimal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SCPI_StatusQuestionableEventQ &rArr; SCPI_ResultInt32 &rArr; resultUInt32BaseSign &rArr; UInt32ToStrBaseSign &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSet
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>SCPI_StatusQuestionableEnableQ</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, minimal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SCPI_StatusQuestionableEnableQ &rArr; SCPI_ResultInt32 &rArr; resultUInt32BaseSign &rArr; UInt32ToStrBaseSign &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>SCPI_StatusQuestionableEnable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, minimal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SCPI_StatusQuestionableEnable &rArr; SCPI_ParamInt32 &rArr; ParamSignUInt32 &rArr; SCPI_Parameter &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamInt32
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[355]"></a>SCPI_StatusOperationConditionQ</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, minimal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegGet
</UL>

<P><STRONG><a name="[356]"></a>SCPI_StatusOperationEventQ</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, minimal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSet
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegGet
</UL>

<P><STRONG><a name="[357]"></a>SCPI_StatusOperationEnableQ</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, minimal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegGet
</UL>

<P><STRONG><a name="[358]"></a>SCPI_StatusOperationEnable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, minimal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamInt32
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSet
</UL>

<P><STRONG><a name="[75]"></a>SCPI_StatusPreset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, minimal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SCPI_StatusPreset &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[361]"></a>scpiParser_parseProgramData</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = scpiParser_parseProgramData &rArr; scpiLex_DecimalNumericProgramData &rArr; skipExponent &rArr; skipNumbers &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_ProgramExpression
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_ArbitraryBlockProgramData
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_StringProgramData
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_NondecimalNumericData
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_SuffixProgramData
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_CharacterProgramData
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_WhiteSpace
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_DecimalNumericProgramData
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parameter
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_parseAllProgramData
</UL>

<P><STRONG><a name="[362]"></a>scpiParser_parseAllProgramData</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = scpiParser_parseAllProgramData &rArr; scpiParser_parseProgramData &rArr; scpiLex_DecimalNumericProgramData &rArr; skipExponent &rArr; skipNumbers &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_Comma
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_parseProgramData
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_detectProgramMessageUnit
</UL>

<P><STRONG><a name="[363]"></a>scpiParser_detectProgramMessageUnit</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = scpiParser_detectProgramMessageUnit &rArr; scpiParser_parseAllProgramData &rArr; scpiParser_parseProgramData &rArr; scpiLex_DecimalNumericProgramData &rArr; skipExponent &rArr; skipNumbers &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_NewLine
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_Semicolon
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_ProgramHeader
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_WhiteSpace
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_IsEos
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_parseAllProgramData
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidateToken
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Input
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parse
</UL>

<P><STRONG><a name="[365]"></a>SCPI_Parse</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SCPI_Parse &rArr; findCommandHeader &rArr; matchCommand &rArr; matchPattern &rArr; compareStrAndNum &rArr; strBaseToInt32 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPushEx
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;composeCompoundCommand
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_detectProgramMessageUnit
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findCommandHeader
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCommand
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNewLine
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Input
</UL>

<P><STRONG><a name="[1ff]"></a>SCPI_Init</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SCPI_Init &rArr; SCPI_ErrorInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[2a7]"></a>SCPI_Input</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SCPI_Input &rArr; SCPI_Parse &rArr; findCommandHeader &rArr; matchCommand &rArr; matchPattern &rArr; compareStrAndNum &rArr; strBaseToInt32 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parse
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_detectProgramMessageUnit
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[25c]"></a>SCPI_ResultCharacters</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCPI_ResultCharacters &rArr; writeDelimiter &rArr; writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDelimiter
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_SystemVersionQ
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreIdnQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRes
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMode
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRMode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSteps
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStep
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopT
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartT
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHORTS1
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPENS1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FREQS1
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARCS1
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTIMS1
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTIMS1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTIMS1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOWAcS1
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUpperAcS1
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageAcS1
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageQuery
</UL>

<P><STRONG><a name="[266]"></a>SCPI_ResultInt32</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SCPI_ResultInt32 &rArr; resultUInt32BaseSign &rArr; UInt32ToStrBaseSign &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resultUInt32BaseSign
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_SystemErrorCountQ
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_StubQ
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_StatusQuestionableEventQ
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_StatusQuestionableEnableQ
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreStbQ
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreSreQ
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreOpcQ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreEsrQ
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreEseQ
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_CoreTstQ
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ChoiceQ
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultError
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_StatusOperationEnableQ
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_StatusOperationEventQ
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_StatusOperationConditionQ
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_StatusQuestionableConditionQ
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreTstQ
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArrayInt32
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArrayInt16
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArrayInt8
</UL>

<P><STRONG><a name="[36d]"></a>SCPI_ResultUInt32Base</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resultUInt32BaseSign
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArrayUInt32
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArrayUInt16
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArrayUInt8
</UL>

<P><STRONG><a name="[36e]"></a>SCPI_ResultInt64</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resultUInt64BaseSign
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArrayInt64
</UL>

<P><STRONG><a name="[36f]"></a>SCPI_ResultUInt64Base</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resultUInt64BaseSign
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArrayUInt64
</UL>

<P><STRONG><a name="[260]"></a>SCPI_ResultFloat</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = SCPI_ResultFloat &rArr; SCPI_FloatToStr &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_FloatToStr
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDelimiter
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHORTQ1
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPENQ1
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FREQQ1
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARCQ1
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTIMQ1
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTIMQ1
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTIMQ1
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOWAcQ1
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUpperAcQ1
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArrayFloat
</UL>

<P><STRONG><a name="[25b]"></a>SCPI_ResultDouble</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = SCPI_ResultDouble &rArr; SCPI_DoubleToStr &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_DoubleToStr
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDelimiter
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMM_MeasureVoltageAcQ
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageDcQ1
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageAcQ1
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMM_MeasureVoltageDcQ
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArrayDouble
</UL>

<P><STRONG><a name="[372]"></a>SCPI_ResultText</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnpbrk
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDelimiter
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[353]"></a>SCPI_ResultError</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SCPI_ResultError &rArr; SCPI_ResultInt32 &rArr; resultUInt32BaseSign &rArr; UInt32ToStrBaseSign &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorTranslate
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnpbrk
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSemicolon
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDelimiter
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_SystemErrorNextQ
</UL>

<P><STRONG><a name="[375]"></a>SCPI_ResultArbitraryBlockHeader</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCPI_ResultArbitraryBlockHeader &rArr; SCPI_UInt32ToStrBase &rArr; UInt32ToStrBaseSign &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_UInt32ToStrBase
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArbitraryBlock
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produceResultArrayBinary
</UL>

<P><STRONG><a name="[377]"></a>SCPI_ResultArbitraryBlockData</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SCPI_ResultArbitraryBlockData &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArbitraryBlock
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produceResultArrayBinary
</UL>

<P><STRONG><a name="[26a]"></a>SCPI_ResultArbitraryBlock</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SCPI_ResultArbitraryBlock &rArr; SCPI_ResultArbitraryBlockData &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArbitraryBlockData
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArbitraryBlockHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ArbQ
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produceResultArrayBinary
</UL>

<P><STRONG><a name="[378]"></a>SCPI_ResultBool</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resultUInt32BaseSign
</UL>

<P><STRONG><a name="[26b]"></a>SCPI_Parameter</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SCPI_Parameter &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_Comma
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_parseProgramData
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidateToken
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamNumber
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamFloat
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamDouble
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamCopyText
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamChoice
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamCharacters
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamBool
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamArbitraryBlock
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Chanlst
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignUInt64
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignUInt32
</UL>

<P><STRONG><a name="[386]"></a>SCPI_ParamIsNumber</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, parser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamFloat
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamDouble
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignUInt64
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignUInt32
</UL>

<P><STRONG><a name="[316]"></a>SCPI_ParamToInt32</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SCPI_ParamToInt32 &rArr; ParamSignToUInt32 &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignToUInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamBool
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ExprNumericListEntryInt
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channelSpec
</UL>

<P><STRONG><a name="[37f]"></a>SCPI_ParamToUInt32</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SCPI_ParamToUInt32 &rArr; ParamSignToUInt32 &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignToUInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToFloat
</UL>

<P><STRONG><a name="[380]"></a>SCPI_ParamToInt64</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignToUInt64
</UL>

<P><STRONG><a name="[381]"></a>SCPI_ParamToUInt64</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SCPI_ParamToUInt64 &rArr; ParamSignToUInt64 &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignToUInt64
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToDouble
</UL>

<P><STRONG><a name="[382]"></a>SCPI_ParamToFloat</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = SCPI_ParamToFloat &rArr; strToFloat &rArr; strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strToFloat
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToUInt32
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamFloat
</UL>

<P><STRONG><a name="[318]"></a>SCPI_ParamToDouble</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = SCPI_ParamToDouble &rArr; strToDouble &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strToDouble
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToUInt64
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamNumber
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamDouble
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ExprNumericListEntryDouble
</UL>

<P><STRONG><a name="[261]"></a>SCPI_ParamFloat</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = SCPI_ParamFloat &rArr; SCPI_ParamToFloat &rArr; strToFloat &rArr; strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parameter
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToFloat
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamIsNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHORTS1
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPENS1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FREQS1
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARCS1
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTIMS1
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTIMS1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTIMS1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOWAcS1
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUpperAcS1
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamArrayFloat
</UL>

<P><STRONG><a name="[262]"></a>SCPI_ParamDouble</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = SCPI_ParamDouble &rArr; SCPI_ParamToDouble &rArr; strToDouble &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parameter
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToDouble
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamIsNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMM_ConfigureVoltageDc
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamArrayDouble
</UL>

<P><STRONG><a name="[324]"></a>SCPI_ParamInt32</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SCPI_ParamInt32 &rArr; ParamSignUInt32 &rArr; SCPI_Parameter &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignUInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_StatusQuestionableEnable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreSre
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreEse
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_StatusOperationEnable
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamArrayInt32
</UL>

<P><STRONG><a name="[25f]"></a>SCPI_ParamUInt32</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SCPI_ParamUInt32 &rArr; ParamSignUInt32 &rArr; SCPI_Parameter &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignUInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSteps
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStep
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageAcS1
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamArrayUInt32
</UL>

<P><STRONG><a name="[389]"></a>SCPI_ParamInt64</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignUInt64
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamArrayInt64
</UL>

<P><STRONG><a name="[38a]"></a>SCPI_ParamUInt64</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignUInt64
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamArrayUInt64
</UL>

<P><STRONG><a name="[25d]"></a>SCPI_ParamCharacters</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SCPI_ParamCharacters &rArr; SCPI_Parameter &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parameter
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageSet
</UL>

<P><STRONG><a name="[269]"></a>SCPI_ParamArbitraryBlock</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SCPI_ParamArbitraryBlock &rArr; SCPI_Parameter &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parameter
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ArbQ
</UL>

<P><STRONG><a name="[268]"></a>SCPI_ParamCopyText</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SCPI_ParamCopyText &rArr; SCPI_Parameter &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parameter
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Text
</UL>

<P><STRONG><a name="[38b]"></a>SCPI_ParamToChoice</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SCPI_ParamToChoice &rArr; matchPattern &rArr; compareStrAndNum &rArr; strBaseToInt32 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchPattern
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamNumber
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamChoice
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamBool
</UL>

<P><STRONG><a name="[265]"></a>SCPI_ChoiceToName</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCPI_ChoiceToName
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_NumberToStr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ChoiceQ
</UL>

<P><STRONG><a name="[263]"></a>SCPI_ParamBool</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SCPI_ParamBool &rArr; SCPI_ParamToChoice &rArr; matchPattern &rArr; compareStrAndNum &rArr; strBaseToInt32 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parameter
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToInt32
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToChoice
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Bool
</UL>

<P><STRONG><a name="[264]"></a>SCPI_ParamChoice</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SCPI_ParamChoice &rArr; SCPI_ParamToChoice &rArr; matchPattern &rArr; compareStrAndNum &rArr; strBaseToInt32 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parameter
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToChoice
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ChoiceQ
</UL>

<P><STRONG><a name="[38d]"></a>SCPI_IsCmd</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchCommand
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[56e]"></a>SCPI_CmdTag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, parser.o(.text), UNUSED)

<P><STRONG><a name="[38e]"></a>SCPI_Match</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchCommand
</UL>

<P><STRONG><a name="[267]"></a>SCPI_CommandNumbers</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SCPI_CommandNumbers &rArr; matchCommand &rArr; matchPattern &rArr; compareStrAndNum &rArr; strBaseToInt32 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Numbers
</UL>

<P><STRONG><a name="[56f]"></a>SCPI_ParamIsValid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, parser.o(.text), UNUSED)

<P><STRONG><a name="[570]"></a>SCPI_ParamErrorOccurred</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, parser.o(.text), UNUSED)

<P><STRONG><a name="[394]"></a>SCPI_ResultArrayInt8</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produceResultArrayBinary
</UL>

<P><STRONG><a name="[395]"></a>SCPI_ResultArrayUInt8</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultUInt32Base
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produceResultArrayBinary
</UL>

<P><STRONG><a name="[396]"></a>SCPI_ResultArrayInt16</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produceResultArrayBinary
</UL>

<P><STRONG><a name="[397]"></a>SCPI_ResultArrayUInt16</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultUInt32Base
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produceResultArrayBinary
</UL>

<P><STRONG><a name="[398]"></a>SCPI_ResultArrayInt32</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produceResultArrayBinary
</UL>

<P><STRONG><a name="[399]"></a>SCPI_ResultArrayUInt32</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultUInt32Base
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produceResultArrayBinary
</UL>

<P><STRONG><a name="[39a]"></a>SCPI_ResultArrayInt64</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt64
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produceResultArrayBinary
</UL>

<P><STRONG><a name="[39b]"></a>SCPI_ResultArrayUInt64</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultUInt64Base
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produceResultArrayBinary
</UL>

<P><STRONG><a name="[39c]"></a>SCPI_ResultArrayFloat</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultFloat
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produceResultArrayBinary
</UL>

<P><STRONG><a name="[39d]"></a>SCPI_ResultArrayDouble</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultDouble
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produceResultArrayBinary
</UL>

<P><STRONG><a name="[39e]"></a>SCPI_ParamArrayInt32</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamInt32
</UL>

<P><STRONG><a name="[39f]"></a>SCPI_ParamArrayUInt32</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamUInt32
</UL>

<P><STRONG><a name="[3a0]"></a>SCPI_ParamArrayInt64</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamInt64
</UL>

<P><STRONG><a name="[3a1]"></a>SCPI_ParamArrayUInt64</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamUInt64
</UL>

<P><STRONG><a name="[3a2]"></a>SCPI_ParamArrayFloat</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamFloat
</UL>

<P><STRONG><a name="[3a3]"></a>SCPI_ParamArrayDouble</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamDouble
</UL>

<P><STRONG><a name="[259]"></a>SCPI_ParamNumber</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, units.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = SCPI_ParamNumber &rArr; SCPI_ParamToDouble &rArr; strToDouble &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parameter
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_SuffixProgramData
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_CharacterProgramData
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_WhiteSpace
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_DecimalNumericProgramData
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToDouble
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transformNumber
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToChoice
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMM_MeasureVoltageAcQ
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMM_MeasureVoltageDcQ
</UL>

<P><STRONG><a name="[25a]"></a>SCPI_NumberToStr</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, units.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = SCPI_NumberToStr &rArr; SCPI_DoubleToStr &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ChoiceToName
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSD_strnlen
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translateUnitInverse
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_DoubleToStr
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMM_MeasureVoltageAcQ
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMM_MeasureVoltageDcQ
</UL>

<P><STRONG><a name="[373]"></a>strnpbrk</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strnpbrk
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultError
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdSeparatorPos
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patternSeparatorPos
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultText
</UL>

<P><STRONG><a name="[369]"></a>UInt32ToStrBaseSign</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UInt32ToStrBaseSign &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_dtostre
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Int32ToStr
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_UInt32ToStrBase
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resultUInt32BaseSign
</UL>

<P><STRONG><a name="[3ac]"></a>SCPI_Int32ToStr</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UInt32ToStrBaseSign
</UL>

<P><STRONG><a name="[376]"></a>SCPI_UInt32ToStrBase</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SCPI_UInt32ToStrBase &rArr; UInt32ToStrBaseSign &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UInt32ToStrBaseSign
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArbitraryBlockHeader
</UL>

<P><STRONG><a name="[36c]"></a>UInt64ToStrBaseSign</STRONG> (Thumb, 328 bytes, Stack size 80 bytes, utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_UInt64ToStrBase
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Int64ToStr
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resultUInt64BaseSign
</UL>

<P><STRONG><a name="[3ad]"></a>SCPI_Int64ToStr</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UInt64ToStrBaseSign
</UL>

<P><STRONG><a name="[3ae]"></a>SCPI_UInt64ToStrBase</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UInt64ToStrBaseSign
</UL>

<P><STRONG><a name="[370]"></a>SCPI_FloatToStr</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SCPI_FloatToStr &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultFloat
</UL>

<P><STRONG><a name="[371]"></a>SCPI_DoubleToStr</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SCPI_DoubleToStr &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultDouble
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_NumberToStr
</UL>

<P><STRONG><a name="[37b]"></a>strBaseToInt32</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = strBaseToInt32 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareStrAndNum
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignToUInt32
</UL>

<P><STRONG><a name="[37a]"></a>strBaseToUInt32</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = strBaseToUInt32 &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignToUInt32
</UL>

<P><STRONG><a name="[37e]"></a>strBaseToInt64</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = strBaseToInt64 &rArr; strtoll &rArr; __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoll
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignToUInt64
</UL>

<P><STRONG><a name="[37d]"></a>strBaseToUInt64</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = strBaseToUInt64 &rArr; strtoull &rArr; __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoull
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignToUInt64
</UL>

<P><STRONG><a name="[383]"></a>strToFloat</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = strToFloat &rArr; strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtof
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToFloat
</UL>

<P><STRONG><a name="[385]"></a>strToDouble</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = strToDouble &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToDouble
</UL>

<P><STRONG><a name="[3a5]"></a>compareStr</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = compareStr &rArr; strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translateUnit
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchPattern
</UL>

<P><STRONG><a name="[3b6]"></a>compareStrAndNum</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = compareStrAndNum &rArr; strBaseToInt32 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strBaseToInt32
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchPattern
</UL>

<P><STRONG><a name="[3a9]"></a>skipWhitespace</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = skipWhitespace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transformNumber
</UL>

<P><STRONG><a name="[38c]"></a>matchPattern</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = matchPattern &rArr; compareStrAndNum &rArr; strBaseToInt32 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareStrAndNum
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patternSeparatorShortPos
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareStr
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchCommand
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToChoice
</UL>

<P><STRONG><a name="[30d]"></a>BSD_strnlen</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_NumberToStr
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPushEx
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchCommand
</UL>

<P><STRONG><a name="[360]"></a>matchCommand</STRONG> (Thumb, 636 bytes, Stack size 72 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = matchCommand &rArr; matchPattern &rArr; compareStrAndNum &rArr; strBaseToInt32 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSD_strnlen
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdSeparatorPos
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patternSeparatorPos
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchPattern
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CommandNumbers
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Match
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_IsCmd
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findCommandHeader
</UL>

<P><STRONG><a name="[366]"></a>composeCompoundCommand</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = composeCompoundCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parse
</UL>

<P><STRONG><a name="[3bf]"></a>SCPI_dtostre</STRONG> (Thumb, 464 bytes, Stack size 88 bytes, utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpi_ecvt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UInt32ToStrBaseSign
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[390]"></a>SCPI_GetNativeFormat</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, utils.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produceResultArrayBinary
</UL>

<P><STRONG><a name="[391]"></a>SCPI_Swap16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utils.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produceResultArrayBinary
</UL>

<P><STRONG><a name="[392]"></a>SCPI_Swap32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, utils.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produceResultArrayBinary
</UL>

<P><STRONG><a name="[393]"></a>SCPI_Swap64</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, utils.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produceResultArrayBinary
</UL>

<P><STRONG><a name="[32a]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_ArbitraryBlockProgramData
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_CharacterProgramData
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isNonzeroDigit
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipHexNum
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipProgramMnemonic
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipAlpha
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipNumbers
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipDigit
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareStrAndNum
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patternSeparatorShortPos
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipWhitespace
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[286]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UInt64ToStrBaseSign
</UL>

<P><STRONG><a name="[571]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Testvalue
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Set_Time
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSet_value
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_Item
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRes
</UL>

<P><STRONG><a name="[3af]"></a>__2snprintf</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, noretval__2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_FloatToStr
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_DoubleToStr
</UL>

<P><STRONG><a name="[3c5]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[3c6]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[3c4]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[d9]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[3c8]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[3b0]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strBaseToInt32
</UL>

<P><STRONG><a name="[3b1]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strBaseToUInt32
</UL>

<P><STRONG><a name="[3b2]"></a>strtoll</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoll &rArr; __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strBaseToInt64
</UL>

<P><STRONG><a name="[3b3]"></a>strtoull</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = strtoull &rArr; __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strBaseToUInt64
</UL>

<P><STRONG><a name="[3ab]"></a>strncat</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_NumberToStr
</UL>

<P><STRONG><a name="[3c1]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_dtostre
</UL>

<P><STRONG><a name="[25e]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageSet
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareStrAndNum
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareStr
</UL>

<P><STRONG><a name="[196]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListBox_Setup
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_NumberToStr
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CoreIdnQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRes
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultError
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translateUnit
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchCommand
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_FloatToStr
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_DoubleToStr
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_IsCmd
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToChoice
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArbitraryBlockHeader
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultText
</UL>

<P><STRONG><a name="[151]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSetConfig_value
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSet_value
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_Item
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_list
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_List
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRes
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASCIICode
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackStandFrame
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Input
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendWithCRC
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyBuffer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[3d0]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[572]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[367]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Input
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_dtostre
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;composeCompoundCommand
</UL>

<P><STRONG><a name="[3d1]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[573]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_NumKeyboard_Set
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Set_CovPre
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Set_Cov
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freq_Set_Cov
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set_Cov
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avg_Set_Num
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freq_Set_Num
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Set_InputNum
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Set_CompNum
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Set_Num
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_compvalue
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UInt64ToStrBaseSign
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UInt32ToStrBaseSign
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[574]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[575]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[576]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_dtostre
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_UartClear
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_config_Process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRes
</UL>

<P><STRONG><a name="[577]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[578]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[3eb]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[3aa]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_NumberToStr
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_dtostre
</UL>

<P><STRONG><a name="[579]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[57a]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[57b]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[3cc]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
</UL>

<P><STRONG><a name="[57c]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[57d]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[3d5]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[3d6]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[3cf]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[3c7]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[57e]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[3dd]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[3c3]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[3f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> noretval__2snprintf.o(.text)
</UL>
<P><STRONG><a name="[3e0]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[3e1]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[db]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[3cb]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3e5]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[3e6]"></a>__strtof_int</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, strtof.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtof
</UL>

<P><STRONG><a name="[3cd]"></a>__strtoll</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, __strtoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoll
</UL>

<P><STRONG><a name="[3ce]"></a>__strtoull</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, __strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoull
</UL>

<P><STRONG><a name="[57f]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[580]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[3e9]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3d2]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[581]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[3d4]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[3ea]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[3d3]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[582]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3ec]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[583]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3dc]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[44]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[3df]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[3e2]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
</UL>

<P><STRONG><a name="[42]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[3e8]"></a>_strtoull</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, _strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
</UL>

<P><STRONG><a name="[3d8]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[4d1]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[e2]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3f1]"></a>_scanf_really_real</STRONG> (Thumb, 684 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[e7]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[eb]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[3f5]"></a>_scanf_really_hex_real</STRONG> (Thumb, 786 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[4f5]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[584]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[585]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3f6]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[586]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[587]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3d9]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3f9]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[3f8]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[3fc]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[3fa]"></a>_e2d</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[3fb]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[3da]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[3f0]"></a>_btod_edivd</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[3db]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[3ef]"></a>_btod_emuld</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[3fd]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[403]"></a>GL_DispChar</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gui_char.o(i.GL_DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GL_DispChar &rArr; GUI_DispNextLine &rArr; GUI_GetFontDistY &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispNextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CL_DispChar
</UL>

<P><STRONG><a name="[408]"></a>GL_DrawLine</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gui_drawline.o(i.GL_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GL_DrawLine &rArr; GL_DrawLineEx &rArr; GL_DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
</UL>

<P><STRONG><a name="[40a]"></a>GL_DrawLine1Ex</STRONG> (Thumb, 456 bytes, Stack size 64 bytes, gui_drawline.o(i.GL_DrawLine1Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GL_DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetLineColor
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[409]"></a>GL_DrawLineEx</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, gui_drawline.o(i.GL_DrawLineEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GL_DrawLineEx &rArr; GL_DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_sin
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_cos
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atan2
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawLineEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
</UL>

<P><STRONG><a name="[40c]"></a>GL_DrawPoint</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gui_drawpoint.o(i.GL_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawLineEnd
</UL>

<P><STRONG><a name="[414]"></a>GL_FillCircle</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, gui_circ.o(i.GL_FillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GL_FillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
</UL>

<P><STRONG><a name="[412]"></a>GL_FillPolygon</STRONG> (Thumb, 464 bytes, Stack size 64 bytes, gui_fillpolygon.o(i.GL_FillPolygon))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GL_FillPolygon &rArr; _Add
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[ab]"></a>GUIMONO_DispChar</STRONG> (Thumb, 304 bytes, Stack size 104 bytes, gui_charm.o(i.GUIMONO_DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GUIMONO_DispChar &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>GUIMONO_GetCharDistX</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_charm.o(i.GUIMONO_GetCharDistX))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>GUIMONO_GetFontInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_charm.o(i.GUIMONO_GetFontInfo))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>GUIMONO_IsInFont</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gui_charm.o(i.GUIMONO_IsInFont))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>GUIPROP_DispChar</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, gui_charp.o(i.GUIPROP_DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUIPROP_DispChar &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP__FindChar
</UL>
<BR>[Address Reference Count : 6]<UL><LI> gui_fontxbffon16.o(.constdata)
<LI> gui_fontxbffon50.o(.constdata)
<LI> gui_fontxbffon32.o(.constdata)
<LI> f16b_ascii.o(.constdata)
<LI> f20_ascii.o(.constdata)
<LI> f32b_ascii.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>GUIPROP_GetCharDistX</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, gui_charp.o(i.GUIPROP_GetCharDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GUIPROP_GetCharDistX
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP__FindChar
</UL>
<BR>[Address Reference Count : 6]<UL><LI> gui_fontxbffon16.o(.constdata)
<LI> gui_fontxbffon50.o(.constdata)
<LI> gui_fontxbffon32.o(.constdata)
<LI> f16b_ascii.o(.constdata)
<LI> f20_ascii.o(.constdata)
<LI> f32b_ascii.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>GUIPROP_GetFontInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_charp.o(i.GUIPROP_GetFontInfo))
<BR>[Address Reference Count : 6]<UL><LI> gui_fontxbffon16.o(.constdata)
<LI> gui_fontxbffon50.o(.constdata)
<LI> gui_fontxbffon32.o(.constdata)
<LI> f16b_ascii.o(.constdata)
<LI> f20_ascii.o(.constdata)
<LI> f32b_ascii.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>GUIPROP_IsInFont</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, gui_charp.o(i.GUIPROP_IsInFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUIPROP_IsInFont
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP__FindChar
</UL>
<BR>[Address Reference Count : 6]<UL><LI> gui_fontxbffon16.o(.constdata)
<LI> gui_fontxbffon50.o(.constdata)
<LI> gui_fontxbffon32.o(.constdata)
<LI> f16b_ascii.o(.constdata)
<LI> f20_ascii.o(.constdata)
<LI> f32b_ascii.o(.constdata)
</UL>
<P><STRONG><a name="[419]"></a>GUIPROP__FindChar</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_charp.o(i.GUIPROP__FindChar))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_IsInFont
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_GetCharDistX
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[41c]"></a>GUITASK_CopyContext</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gui_task.o(i.GUITASK_CopyContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUITASK_CopyContext &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[41d]"></a>GUITASK_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gui_task.o(i.GUITASK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GUITASK_Init &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTaskNo
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[423]"></a>GUI_ALLOC_AllocNoInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gui_alloc.o(i.GUI_ALLOC_AllocNoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
</UL>

<P><STRONG><a name="[425]"></a>GUI_ALLOC_AllocZero</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gui_alloc_alloczero.o(i.GUI_ALLOC_AllocZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[2ee]"></a>GUI_ALLOC_AssignMemory</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_AssignMemory))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
</UL>

<P><STRONG><a name="[428]"></a>GUI_ALLOC_Free</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gui_alloc.o(i.GUI_ALLOC_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PushFreeBlock
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
</UL>

<P><STRONG><a name="[434]"></a>GUI_ALLOC_FreeFixedBlock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_FreeFixedBlock))
<BR><BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
</UL>

<P><STRONG><a name="[41f]"></a>GUI_ALLOC_GetFixedBlock</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, gui_alloc.o(i.GUI_ALLOC_GetFixedBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
</UL>

<P><STRONG><a name="[426]"></a>GUI_ALLOC_LockH</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_LockH))
<BR><BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
</UL>

<P><STRONG><a name="[2ef]"></a>GUI_ALLOC_SetAvBlockSize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_SetAvBlockSize))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
</UL>

<P><STRONG><a name="[427]"></a>GUI_ALLOC_UnlockH</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_UnlockH))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
</UL>

<P><STRONG><a name="[42e]"></a>GUI_ALLOC_h2p</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_h2p))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFirstSibling
</UL>

<P><STRONG><a name="[439]"></a>GUI_AddDecShift</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, gui_adddecshift.o(i.GUI_AddDecShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GUI_AddDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
</UL>

<P><STRONG><a name="[4a8]"></a>GUI_CalcColorDist</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gui_calccolordist.o(i.GUI_CalcColorDist))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_CalcColorDist
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[1fc]"></a>GUI_Clear</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gui_core.o(i.GUI_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_Clear &rArr; GUI_GotoXY &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_SysSetProcess
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPause_Process
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Process
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_config_Process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idem_Process
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Process
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acw_Calibrate
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcw_Calibrate
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Calibrate
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[430]"></a>GUI_ClearRect</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, gui_core.o(i.GUI_ClearRect), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[431]"></a>GUI_DEVICE_Create</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gui_device.o(i.GUI_DEVICE_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
</UL>

<P><STRONG><a name="[2f7]"></a>GUI_DEVICE_CreateAndLink</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_device.o(i.GUI_DEVICE_CreateAndLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_DEVICE_CreateAndLink &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[433]"></a>GUI_DEVICE_Delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_device.o(i.GUI_DEVICE_Delete))
<BR><BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>

<P><STRONG><a name="[432]"></a>GUI_DEVICE_Link</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, gui_device.o(i.GUI_DEVICE_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_DEVICE_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_LinkDevices
</UL>

<P><STRONG><a name="[435]"></a>GUI_DEVICE_LinkDevices</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gui_device.o(i.GUI_DEVICE_LinkDevices))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_DEVICE_LinkDevices &rArr; GUI_DEVICE_Link
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[436]"></a>GUI_DEVICE_Unlink</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_device.o(i.GUI_DEVICE_Unlink))
<BR><BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UnlinkDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
</UL>

<P><STRONG><a name="[438]"></a>GUI_DEVICE_UnlinkTaskDevices</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gui_device.o(i.GUI_DEVICE_UnlinkTaskDevices))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UnlinkDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[464]"></a>GUI_DEVICE__GetpDriver</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gui_device.o(i.GUI_DEVICE__GetpDriver))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVRAMAddrEx
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPosEx
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPaletteEx
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCacheEx
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumLayers
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
</UL>

<P><STRONG><a name="[155]"></a>GUI_DispCharAt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_dispchar.o(i.GUI_DispCharAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GUI_DispCharAt &rArr; CL_DispChar &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CL_DispChar
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_list
</UL>

<P><STRONG><a name="[154]"></a>GUI_DispDecAt</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, gui_val.o(i.GUI_DispDecAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GUI_DispDecAt &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SysSet_value
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSet_value
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_Item
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_list
</UL>

<P><STRONG><a name="[407]"></a>GUI_DispNextLine</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_char.o(i.GUI_DispNextLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_DispNextLine &rArr; GUI_GetFontDistY &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DispChar
</UL>

<P><STRONG><a name="[43b]"></a>GUI_DispString</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, gui_dispstring.o(i.GUI_DispString))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>

<P><STRONG><a name="[137]"></a>GUI_DispStringAt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_dispstringat.o(i.GUI_DispStringAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_CompTest
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comp
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_DelayTime
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_DelayMSG
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_Inputnum
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Testvalue
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Sys
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SysSet_value
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSYSConfig_value
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSetConfig_value
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSet_value
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_SetConfig_Item
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_Item
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_list
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_List
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_TestMSG
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_Set_Item
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SYS_Set_Item
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_mainitem
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPause_Process
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Process
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acw_Calibrate
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcw_Calibrate
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Calibrate
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Calibrate
</UL>

<P><STRONG><a name="[13b]"></a>GUI_DispStringInRect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_dispstringinrect.o(i.GUI_DispStringInRect))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Pre_Uint
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNum
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IdelButton
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispSYSSetButtonvalue
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispSYSButtonvalue
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSetup_ConfigButtonvalue
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispSetupButtonvalue
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Fastset_Disp
</UL>

<P><STRONG><a name="[441]"></a>GUI_DispStringInRectMax</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, gui_dispstringinrect.o(i.GUI_DispStringInRectMax), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[125]"></a>GUI_DrawGradientRoundedV</STRONG> (Thumb, 116 bytes, Stack size 80 bytes, gui_drawgradientrounded.o(i.GUI_DrawGradientRoundedV))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradientRounded
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNum
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Fastbutton
</UL>

<P><STRONG><a name="[1be]"></a>GUI_DrawLine</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gui_drawline.o(i.GUI_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_DrawLineEx &rArr; GL_DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNum
</UL>

<P><STRONG><a name="[1bc]"></a>GUI_DrawRect</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, gui_2dlib.o(i.GUI_DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUI_DrawRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNum
</UL>

<P><STRONG><a name="[135]"></a>GUI_FillRect</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, gui_fillrect.o(i.GUI_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUI_FillRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNum
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Testvalue
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SysSet_value
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSetConfig_value
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSet_value
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_mainitem
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_SysSetProcess
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_config_Process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idem_Process
</UL>

<P><STRONG><a name="[132]"></a>GUI_FillRoundedRect</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, gui_fillroundedrect.o(i.GUI_FillRoundedRect), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MidRect
</UL>

<P><STRONG><a name="[4c1]"></a>GUI_GetBitsPerPixelEx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd_getex.o(i.GUI_GetBitsPerPixelEx))
<BR><BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
</UL>

<P><STRONG><a name="[41b]"></a>GUI_GetBkColor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_getcolor.o(i.GUI_GetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_GetBkColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBkColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[3ff]"></a>GUI_GetCharDistX</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_char.o(i.GUI_GetCharDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CL_DispChar
</UL>

<P><STRONG><a name="[449]"></a>GUI_GetCharDistXEx</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_char.o(i.GUI_GetCharDistXEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetOverlap
</UL>

<P><STRONG><a name="[44a]"></a>GUI_GetClientRect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_getclientrect.o(i.GUI_GetClientRect), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>

<P><STRONG><a name="[41a]"></a>GUI_GetColor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_getcolor.o(i.GUI_GetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradientRounded
</UL>

<P><STRONG><a name="[43a]"></a>GUI_GetFontDistY</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gui_char.o(i.GUI_GetFontDistY))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_GetFontDistY &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispNextLine
</UL>

<P><STRONG><a name="[401]"></a>GUI_GetFontSizeY</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_getfontsizey.o(i.GUI_GetFontSizeY))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_GetFontSizeY &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetFontSizeY
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CL_DispChar
</UL>

<P><STRONG><a name="[43c]"></a>GUI_GetYAdjust</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gui_char.o(i.GUI_GetYAdjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_GetYAdjust &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[4c3]"></a>GUI_GetpfColor2IndexEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(i.GUI_GetpfColor2IndexEx))
<BR><BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
</UL>

<P><STRONG><a name="[4c2]"></a>GUI_GetpfIndex2ColorEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(i.GUI_GetpfIndex2ColorEx))
<BR><BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
</UL>

<P><STRONG><a name="[42f]"></a>GUI_GotoXY</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_goto.o(i.GUI_GotoXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_GotoXY &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GotoY
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GotoX
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
</UL>

<P><STRONG><a name="[1fb]"></a>GUI_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gui_core.o(i.GUI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GUI_Init &rArr; WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM_BringToBottom &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Init
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[405]"></a>GUI_Lock</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, gui_task.o(i.GUI_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Lock
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_UnlinkTaskDevices
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_LinkDevices
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTaskNo
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCharAt
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_SetEncodeUTF8
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontSizeY
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DispChar
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispNextLine
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>

<P><STRONG><a name="[458]"></a>GUI_MEMDEV_Delete</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, guidev.o(i.GUI_MEMDEV_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI_MEMDEV_Delete &rArr; GUI_USAGE_DecUseCnt &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
</UL>

<P><STRONG><a name="[45b]"></a>GUI_MEMDEV_GetBitsPerPixel</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, guidev.o(i.GUI_MEMDEV_GetBitsPerPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_MEMDEV_GetBitsPerPixel &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPPDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[45d]"></a>GUI_MEMDEV_GetDataPtr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, guidev_getdataptr.o(i.GUI_MEMDEV_GetDataPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
</UL>

<P><STRONG><a name="[5c]"></a>GUI_MEMDEV__WriteToActiveOpaque</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, guidev_writetoactiveopaque.o(i.GUI_MEMDEV__WriteToActiveOpaque))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[4c0]"></a>GUI_MergeRect</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gui_mergerect.o(i.GUI_MergeRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_MergeRect
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[49e]"></a>GUI_MoveRect</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gui_moverect.o(i.GUI_MoveRect))
<BR><BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
</UL>

<P><STRONG><a name="[4ad]"></a>GUI_RectsIntersect</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gui_rectsintersect.o(i.GUI_RectsIntersect))
<BR><BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[459]"></a>GUI_SelectLCD</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gui_selectlcd.o(i.GUI_SelectLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
</UL>

<P><STRONG><a name="[463]"></a>GUI_SelectLayer</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gui_selectlayer.o(i.GUI_SelectLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SelectTopLevelLayer
</UL>

<P><STRONG><a name="[13a]"></a>GUI_SetBkColor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gui_setcolor.o(i.GUI_SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_SetBkColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_DelayTime
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_Inputnum
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IdelButton
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Testvalue
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Sys
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSetup_ConfigButtonvalue
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_SetConfig_Item
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_Item
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_List
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_Set_Item
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SYS_Set_Item
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Fastset_Disp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_SysSetProcess
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Process
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_config_Process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idem_Process
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Process
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[124]"></a>GUI_SetColor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gui_setcolor.o(i.GUI_SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_SetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_DelayTime
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_Inputnum
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Pre_Uint
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNum
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IdelButton
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Testvalue
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Sys
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SysSet_value
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispSYSSetButtonvalue
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSYSConfig_value
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispSYSButtonvalue
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSetConfig_value
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSetup_ConfigButtonvalue
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSet_value
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispSetupButtonvalue
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_SetConfig_Item
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_Item
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_list
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_List
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_Set_Item
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SYS_Set_Item
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Fastset_Disp
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_mainitem
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MidRect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Fastbutton
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_SysSetProcess
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_config_Process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idem_Process
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Process
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acw_Calibrate
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcw_Calibrate
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Calibrate
</UL>

<P><STRONG><a name="[2f0]"></a>GUI_SetDefaultFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_core.o(i.GUI_SetDefaultFont))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
</UL>

<P><STRONG><a name="[134]"></a>GUI_SetFont</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_setfont.o(i.GUI_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_SetFont &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_Inputnum
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Pre_Uint
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNum
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Testvalue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_Item
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_list
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_List
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_mainitem
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Process
</UL>

<P><STRONG><a name="[454]"></a>GUI_SetOrg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gui_setorg.o(i.GUI_SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_SetOrg &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[1bd]"></a>GUI_SetPenSize</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_pen.o(i.GUI_SetPenSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_SetPenSize &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNum
</UL>

<P><STRONG><a name="[136]"></a>GUI_SetTextMode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_settextmode.o(i.GUI_SetTextMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_SetTextMode &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_DelayTime
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_Inputnum
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IdelButton
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Testvalue
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SysSet_value
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispSYSSetButtonvalue
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSYSConfig_value
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispSYSButtonvalue
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSetConfig_value
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSetup_ConfigButtonvalue
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSet_value
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispSetupButtonvalue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Idel_Item
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_List
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Fastset_Disp
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_mainitem
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTest_Process
</UL>

<P><STRONG><a name="[468]"></a>GUI_SignalEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_waitevent.o(i.GUI_SignalEvent))
<BR><BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[467]"></a>GUI_StoreKey</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_onkey.o(i.GUI_StoreKey))
<BR><BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[1fd]"></a>GUI_UC_SetEncodeUTF8</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_uc_encodeutf8.o(i.GUI_UC_SetEncodeUTF8))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_UC_SetEncodeUTF8 &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[46c]"></a>GUI_UC__GetCharCodeInc</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gui_uc.o(i.GUI_UC__GetCharCodeInc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[440]"></a>GUI_UC__NumChars2NumBytes</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, gui_uc.o(i.GUI_UC__NumChars2NumBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_UC__NumChars2NumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[4b2]"></a>GUI_USAGE_AddRect</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, guidev_usage.o(i.GUI_USAGE_AddRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_USAGE_AddRect
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[45a]"></a>GUI_USAGE_DecUseCnt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, guidev_usage.o(i.GUI_USAGE_DecUseCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_USAGE_DecUseCnt &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>

<P><STRONG><a name="[406]"></a>GUI_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_task.o(i.GUI_Unlock))
<BR><BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCharAt
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_SetEncodeUTF8
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontSizeY
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DispChar
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispNextLine
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>

<P><STRONG><a name="[4aa]"></a>GUI__CompactPixelIndices</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, gui__compactpixelindices.o(i.GUI__CompactPixelIndices))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Convert8
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Convert16
</UL>

<P><STRONG><a name="[450]"></a>GUI__Config</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gui_core.o(i.GUI__Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GUI__Config &rArr; LCD_X_Config &rArr; GUI_DEVICE_CreateAndLink &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[43f]"></a>GUI__DispLine</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, gui_charline.o(i.GUI__DispLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[444]"></a>GUI__DispStringInRect</STRONG> (Thumb, 320 bytes, Stack size 72 bytes, gui_dispstringinrect.o(i.GUI__DispStringInRect), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__HandleEOLine
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetClientRect
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
</UL>

<P><STRONG><a name="[44d]"></a>GUI__GetFontSizeY</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui__getfontsizey.o(i.GUI__GetFontSizeY))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontSizeY
</UL>

<P><STRONG><a name="[43e]"></a>GUI__GetLineDistX</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gui_charline.o(i.GUI__GetLineDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetOverlap
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[43d]"></a>GUI__GetLineNumChars</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, gui_charline.o(i.GUI__GetLineNumChars))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI__GetLineNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[400]"></a>GUI__GetOverlap</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_charline.o(i.GUI__GetOverlap))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CL_DispChar
</UL>

<P><STRONG><a name="[46b]"></a>GUI__HandleEOLine</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui__handleeoline.o(i.GUI__HandleEOLine), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>

<P><STRONG><a name="[495]"></a>GUI__IntersectRect</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gui__intersectrect.o(i.GUI__IntersectRect))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
</UL>

<P><STRONG><a name="[443]"></a>GUI__IntersectRects</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gui__intersectrects.o(i.GUI__IntersectRects))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI__IntersectRects
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectEx
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>

<P><STRONG><a name="[46d]"></a>GUI__ManageCache</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui__managecache.o(i.GUI__ManageCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI__ManageCache &rArr; GUI__ManageCacheEx
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCacheEx
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[46e]"></a>GUI__ManageCacheEx</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, gui__managecache.o(i.GUI__ManageCacheEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI__ManageCacheEx
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
</UL>

<P><STRONG><a name="[41e]"></a>GUI__RegisterExit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_core.o(i.GUI__RegisterExit))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
</UL>

<P><STRONG><a name="[420]"></a>GUI__memset</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gui__memset.o(i.GUI__memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__memset
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
</UL>

<P><STRONG><a name="[4b9]"></a>GUI__memset16</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gui__memset16.o(i.GUI__memset16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>

<P><STRONG><a name="[446]"></a>GUI__sqrt32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gui__sqrt32.o(i.GUI__sqrt32))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradientRounded
</UL>

<P><STRONG><a name="[410]"></a>GUI_cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_drawline.o(i.GUI_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_cos &rArr; GUI_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[411]"></a>GUI_sin</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gui_drawline.o(i.GUI_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_cos
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[479]"></a>LCD_Color2Index</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(i.LCD_Color2Index))
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableUncached
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBkColor
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[417]"></a>LCD_DrawBitmap</STRONG> (Thumb, 504 bytes, Stack size 88 bytes, lcd.o(i.LCD_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
</UL>

<P><STRONG><a name="[46]"></a>LCD_DrawHLine</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lcd.o(i.LCD_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gui_core.o(.constdata)
<LI> gui_drawgradientrounded.o(i.GUI_DrawGradientRoundedV)
</UL>
<P><STRONG><a name="[a1]"></a>LCD_DrawPixel</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lcd.o(i.LCD_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DrawPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_core.o(.constdata)
</UL>
<P><STRONG><a name="[40d]"></a>LCD_DrawVLine</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lcd.o(i.LCD_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DrawVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
</UL>

<P><STRONG><a name="[418]"></a>LCD_FillRect</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lcd.o(i.LCD_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__DrawBitmap_1bpp
</UL>

<P><STRONG><a name="[46f]"></a>LCD_GetBitsPerPixelEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetBitsPerPixelEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetBitsPerPixelEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[447]"></a>LCD_GetBkColorIndex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_getcolorindex.o(i.LCD_GetBkColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
</UL>

<P><STRONG><a name="[44c]"></a>LCD_GetColorIndex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_getcolorindex.o(i.LCD_GetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
</UL>

<P><STRONG><a name="[471]"></a>LCD_GetMirrorXEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetMirrorXEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetMirrorXEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
</UL>

<P><STRONG><a name="[472]"></a>LCD_GetMirrorYEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetMirrorYEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetMirrorYEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
</UL>

<P><STRONG><a name="[473]"></a>LCD_GetNumColors</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetNumColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetNumColors &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2Color_0
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetIndexMask_0
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[474]"></a>LCD_GetNumColorsEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetNumColorsEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetNumColorsEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[475]"></a>LCD_GetNumLayers</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcd_getnumdisplays.o(i.LCD_GetNumLayers))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetNumLayers
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[476]"></a>LCD_GetPalette</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetPalette))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetPalette &rArr; LCD_GetPaletteEx
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPaletteEx
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2Color_0
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[477]"></a>LCD_GetPaletteEx</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_getex.o(i.LCD_GetPaletteEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetPaletteEx
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
</UL>

<P><STRONG><a name="[2f9]"></a>LCD_GetSwapXYEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetSwapXYEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetSwapXYEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVSize
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
</UL>

<P><STRONG><a name="[6]"></a>LCD_GetpPalConvTableBM</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_color.o(i.LCD_GetpPalConvTableBM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetpPalConvTableBM &rArr; LCD_GetpPalConvTableUncached
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableUncached
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_core.o(.data)
</UL>
<P><STRONG><a name="[478]"></a>LCD_GetpPalConvTableUncached</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcd_color.o(i.LCD_GetpPalConvTableUncached))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetpPalConvTableUncached
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableBM
</UL>

<P><STRONG><a name="[448]"></a>LCD_Index2Color</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(i.LCD_Index2Color))
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[a7]"></a>LCD_Index2Color_565</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, guicc_565.o(i.LCD_Index2Color_565))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Index2Color_565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_565.o(.constdata)
</UL>
<P><STRONG><a name="[453]"></a>LCD_Init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_Init &rArr; LCD_InitColors &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[47b]"></a>LCD_InitColors</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd_color.o(i.LCD_InitColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCD_InitColors &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[47c]"></a>LCD_InitLUT</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lcd_color.o(i.LCD_InitLUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_InitLUT &rArr; LCD_SetLUTEntryEx
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColorsEx
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumLayers
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[460]"></a>LCD_SelectLCD</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lcd_selectlcd.o(i.LCD_SelectLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SelectLCD
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Unlink
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>

<P><STRONG><a name="[465]"></a>LCD_SetBkColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetBkColor))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>

<P><STRONG><a name="[480]"></a>LCD_SetBkColorIndex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetBkColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBkColor
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[47e]"></a>LCD_SetClipRectEx</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lcd_setcliprectex.o(i.LCD_SetClipRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
</UL>

<P><STRONG><a name="[47a]"></a>LCD_SetClipRectMax</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetClipRectMax))
<BR><BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
</UL>

<P><STRONG><a name="[466]"></a>LCD_SetColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetColor))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradientRounded
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>

<P><STRONG><a name="[47f]"></a>LCD_SetColorIndex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[416]"></a>LCD_SetDrawMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetDrawMode))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
</UL>

<P><STRONG><a name="[47d]"></a>LCD_SetLUTEntryEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_SetLUTEntryEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetLUTEntryEx
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[2f8]"></a>LCD_SetPosEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_SetPosEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetPosEx
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[2f2]"></a>LCD_SetSizeEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_SetSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitController
</UL>

<P><STRONG><a name="[2f4]"></a>LCD_SetVRAMAddrEx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcd_set.o(i.LCD_SetVRAMAddrEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_SetVRAMAddrEx
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitController
</UL>

<P><STRONG><a name="[2f3]"></a>LCD_SetVSizeEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_SetVSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetVSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitController
</UL>

<P><STRONG><a name="[461]"></a>LCD_UpdateColorIndices</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_updatecolorindices.o(i.LCD_UpdateColorIndices))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_UpdateColorIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColorIndex
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>

<P><STRONG><a name="[481]"></a>LCD__DrawBitmap_1bpp</STRONG> (Thumb, 424 bytes, Stack size 104 bytes, lcd.o(i.LCD__DrawBitmap_1bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
</UL>

<P><STRONG><a name="[482]"></a>LCD__GetBPP</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD__GetBPP))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPPDevice
</UL>

<P><STRONG><a name="[45c]"></a>LCD__GetBPPDevice</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, lcd_getex.o(i.LCD__GetBPPDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD__GetBPPDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPP
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
</UL>

<P><STRONG><a name="[462]"></a>WM_Activate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm.o(i.WM_Activate))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>

<P><STRONG><a name="[483]"></a>WM_BringToBottom</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, wm_bringtobottom.o(i.WM_BringToBottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WM_BringToBottom &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[487]"></a>WM_CreateWindowAsChild</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, wm.o(i.WM_CreateWindowAsChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = WM_CreateWindowAsChild &rArr; WM_BringToBottom &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
</UL>

<P><STRONG><a name="[48c]"></a>WM_DefaultProc</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wm.o(i.WM_DefaultProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[44b]"></a>WM_GetClientRect</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm_getclientrect.o(i.WM_GetClientRect), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetClientRect
</UL>

<P><STRONG><a name="[48f]"></a>WM_GetClientRectEx</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wm_getclientrect.o(i.WM_GetClientRectEx), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
</UL>

<P><STRONG><a name="[4bd]"></a>WM_GetDesktopWindow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_getdesktopwindow.o(i.WM_GetDesktopWindow))
<BR><BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>

<P><STRONG><a name="[490]"></a>WM_GetFirstChild</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_getfirstchild.o(i.WM_GetFirstChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WM_GetFirstChild &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
</UL>

<P><STRONG><a name="[485]"></a>WM_GetParent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_getparent.o(i.WM_GetParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WM_GetParent &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFirstSibling
</UL>

<P><STRONG><a name="[455]"></a>WM_Init</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, wm.o(i.WM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM_BringToBottom &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__AddCriticalHandle
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[492]"></a>WM_InvalidateRect</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, wm.o(i.WM_InvalidateRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Invalidate1Abs
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>

<P><STRONG><a name="[48a]"></a>WM_InvalidateWindow</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(i.WM_InvalidateWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[498]"></a>WM_InvalidateWindowAndDescsEx</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, wm.o(i.WM_InvalidateWindowAndDescsEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = WM_InvalidateWindowAndDescsEx &rArr;  WM_InvalidateWindowAndDescsEx (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
</UL>

<P><STRONG><a name="[489]"></a>WM_SelectWindow</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wm.o(i.WM_SelectWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WM_SelectWindow &rArr; WM__SelectTopLevelLayer &rArr; GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SelectTopLevelLayer
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[48e]"></a>WM_SendToParent</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm_sendtoparent.o(i.WM_SendToParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WM_SendToParent &rArr; WM_GetParent &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
</UL>

<P><STRONG><a name="[442]"></a>WM_SetUserClipRect</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_setusercliprect.o(i.WM_SetUserClipRect), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
</UL>

<P><STRONG><a name="[49c]"></a>WM__ActivateClipRect</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wm.o(i.WM__ActivateClipRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>

<P><STRONG><a name="[491]"></a>WM__AddCriticalHandle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_criticalhandle.o(i.WM__AddCriticalHandle))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
</UL>

<P><STRONG><a name="[494]"></a>WM__Client2Screen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm.o(i.WM__Client2Screen))
<BR><BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
</UL>

<P><STRONG><a name="[496]"></a>WM__ClipAtParentBorders</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wm.o(i.WM__ClipAtParentBorders))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__ClipAtParentBorders
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DesktopHandle2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[48d]"></a>WM__GetClientRectEx</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_getclientrect.o(i.WM__GetClientRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__GetClientRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
</UL>

<P><STRONG><a name="[4a0]"></a>WM__GetClientRectWin</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wm.o(i.WM__GetClientRectWin))
<BR><BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
</UL>

<P><STRONG><a name="[4a1]"></a>WM__GetFirstSibling</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm__getfirstsibling.o(i.WM__GetFirstSibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WM__GetFirstSibling &rArr; WM_GetParent &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
</UL>

<P><STRONG><a name="[404]"></a>WM__GetNextIVR</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wm.o(i.WM__GetNextIVR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CL_DispChar
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
</UL>

<P><STRONG><a name="[484]"></a>WM__GetPrevSibling</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wm__getprevsibling.o(i.WM__GetPrevSibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WM__GetPrevSibling &rArr; WM__GetFirstSibling &rArr; WM_GetParent &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFirstSibling
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
</UL>

<P><STRONG><a name="[4a3]"></a>WM__GetTopLevelLayer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm.o(i.WM__GetTopLevelLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM__GetTopLevelLayer
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DesktopHandle2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SelectTopLevelLayer
</UL>

<P><STRONG><a name="[402]"></a>WM__InitIVRSearch</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, wm.o(i.WM__InitIVRSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CL_DispChar
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>

<P><STRONG><a name="[488]"></a>WM__InsertWindowIntoList</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, wm.o(i.WM__InsertWindowIntoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WM__InsertWindowIntoList
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[497]"></a>WM__Invalidate1Abs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(i.WM__Invalidate1Abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WM__Invalidate1Abs &rArr; _Invalidate1Abs &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[493]"></a>WM__InvalidateDrawAndDescs</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wm.o(i.WM__InvalidateDrawAndDescs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = WM__InvalidateDrawAndDescs &rArr;  WM__InvalidateDrawAndDescs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[4a4]"></a>WM__InvalidateRect</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, wm.o(i.WM__InvalidateRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
</UL>

<P><STRONG><a name="[486]"></a>WM__InvalidateRectEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(i.WM__InvalidateRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[4bf]"></a>WM__RectIsNZ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm.o(i.WM__RectIsNZ))
<BR><BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[49a]"></a>WM__SelectTopLevelLayer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm.o(i.WM__SelectTopLevelLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WM__SelectTopLevelLayer &rArr; GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
</UL>

<P><STRONG><a name="[49b]"></a>WM__SendMessage</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm__sendmessage.o(i.WM__SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = WM__SendMessage &rArr;  WM_DefaultProc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
</UL>

<P><STRONG><a name="[48b]"></a>WM__SendMsgNoData</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, wm.o(i.WM__SendMsgNoData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WM__SendMsgNoData &rArr; WM__SendMessage &rArr;  WM_DefaultProc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[3de]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[4c4]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[4c5]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[4c6]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[4c7]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[4c8]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[4ca]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[3e7]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[4cb]"></a>__mathlib_tofloat</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_tofloat &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[3f7]"></a>__support_ldexp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[3c9]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[206]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_config_Process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
</UL>

<P><STRONG><a name="[3bc]"></a>frexp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpi_ecvt
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[4cc]"></a>ldexp</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[3bd]"></a>modf</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, modf.o(i.modf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpi_ecvt
</UL>

<P><STRONG><a name="[173]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Set_CovPre
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Set_Cov
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set_Cov
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBCDtoInt
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDtoInt
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inttofloat
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_compvalue
</UL>

<P><STRONG><a name="[4ce]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[3b5]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strToDouble
</UL>

<P><STRONG><a name="[3b4]"></a>strtof</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, strtof.o(i.strtof))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strToFloat
</UL>

<P><STRONG><a name="[3e]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[e0]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[1b9]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Result
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_config_Process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inttofloat
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_compvalue
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[4d2]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[221]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Disp_r
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpi_ecvt
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[4d5]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[4d8]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[4dc]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Result
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Set_Cov
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set_Cov
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToStr_mA
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToStr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FToStr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD_Int
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBCDtoInt
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDtoInt
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inttofloat
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRes
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpi_ecvt
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[4da]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3a7]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpi_ecvt
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translateUnitInverse
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[4db]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[3be]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpi_ecvt
</UL>

<P><STRONG><a name="[4dd]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Set_CovPre
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Set_Cov
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set_Cov
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToStr_mA
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToStr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FToStr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Disp_r
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD_Int
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBCDtoInt
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDtoInt
</UL>

<P><STRONG><a name="[4de]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[20d]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD_Int
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_BCD_Int
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_compvalue
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[588]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[14a]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Set_Cov
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freq_Set_Cov
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set_Cov
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToStr_mA
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToStr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FToStr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBCDtoInt
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDtoInt
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inttofloat
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRes
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageDcQ1
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageAcQ1
</UL>

<P><STRONG><a name="[589]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[384]"></a>__aeabi_ul2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToDouble
</UL>

<P><STRONG><a name="[58a]"></a>_ll_uto_d</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull), UNUSED)

<P><STRONG><a name="[3bb]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpi_ecvt
</UL>

<P><STRONG><a name="[4df]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[4e2]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set_Cov
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inttofloat
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_compvalue
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpi_ecvt
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transformNumber
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[4e0]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[4d4]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[4d7]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freq_Set_Cov
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set_Cov
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToStr_mA
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToStr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FToStr
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD_Int
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_BCD_Int
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpi_ecvt
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[4e1]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[4cf]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[4e3]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[4d0]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[4cd]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modf
</UL>

<P><STRONG><a name="[4e5]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Result
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Set_CovPre
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Disp_r
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inttofloat
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_compvalue
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_FloatToStr
</UL>

<P><STRONG><a name="[4e6]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[207]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_config_Process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fft_Dci
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_compvalue
</UL>

<P><STRONG><a name="[4e8]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[4ec]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[1b8]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Result
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Disp_r
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Disp_beforer
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fft_Dci
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Res
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARCQ1
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTIMQ1
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTIMQ1
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTIMQ1
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOWAcQ1
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUpperAcQ1
</UL>

<P><STRONG><a name="[4ea]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[205]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getberore_Res
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FREQS1
</UL>

<P><STRONG><a name="[4eb]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[1ba]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Result
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_config_Process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Disp_beforer
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_compvalue
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHORTS1
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPENS1
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARCS1
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTIMS1
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTIMS1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTIMS1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOWAcS1
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUpperAcS1
</UL>

<P><STRONG><a name="[4ed]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1b7]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Result
</UL>

<P><STRONG><a name="[58b]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[178]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Result
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_Disp
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Set_CovPre
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Disp_r
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Disp_beforer
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fft_Dci
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inttofloat
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_compvalue
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHORTQ1
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPENQ1
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARCQ1
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTIMQ1
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTIMQ1
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTIMQ1
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOWAcQ1
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUpperAcQ1
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToFloat
</UL>

<P><STRONG><a name="[58c]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[19c]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_Disp
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Disp_r
</UL>

<P><STRONG><a name="[4ee]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[4f1]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[208]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_config_Process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Process
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Res
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_compvalue
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOWAcS1
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUpperAcS1
</UL>

<P><STRONG><a name="[4ef]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[4e7]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[4d3]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1a0]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_Disp
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Process
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fft_Dci
</UL>

<P><STRONG><a name="[4f0]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[58d]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[4f2]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[1]"></a>__ieee_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[d6]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[4d9]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[4c9]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[3e4]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[3f3]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[3f2]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[4f4]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10a]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
</UL>

<P><STRONG><a name="[1ef]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Process
</UL>

<P><STRONG><a name="[76]"></a>DMM_MeasureVoltageDcQ</STRONG> (Thumb, 78 bytes, Stack size 80 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = DMM_MeasureVoltageDcQ &rArr; SCPI_ParamNumber &rArr; SCPI_ParamToDouble &rArr; strToDouble &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultDouble
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamNumber
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_NumberToStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>PageQuery</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PageQuery &rArr; SCPI_ResultCharacters &rArr; writeDelimiter &rArr; writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>PageSet</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = PageSet &rArr; SCPI_ParamCharacters &rArr; SCPI_Parameter &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamCharacters
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>VoltageAcQ1</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = VoltageAcQ1 &rArr; SCPI_ResultDouble &rArr; SCPI_DoubleToStr &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultDouble
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>VoltageAcS1</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = VoltageAcS1 &rArr; SCPI_ParamUInt32 &rArr; ParamSignUInt32 &rArr; SCPI_Parameter &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDate_Comp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamUInt32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>CUpperAcQ1</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = CUpperAcQ1 &rArr; SCPI_ResultFloat &rArr; SCPI_FloatToStr &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultFloat
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>CUpperAcS1</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = CUpperAcS1 &rArr; SCPI_ParamFloat &rArr; SCPI_ParamToFloat &rArr; strToFloat &rArr; strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDate_Comp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamFloat
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>CLOWAcQ1</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = CLOWAcQ1 &rArr; SCPI_ResultFloat &rArr; SCPI_FloatToStr &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultFloat
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>CLOWAcS1</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = CLOWAcS1 &rArr; SCPI_ParamFloat &rArr; SCPI_ParamToFloat &rArr; strToFloat &rArr; strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDate_Comp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamFloat
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>TTIMQ1</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = TTIMQ1 &rArr; SCPI_ResultFloat &rArr; SCPI_FloatToStr &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultFloat
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>TTIMS1</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = TTIMS1 &rArr; SCPI_ParamFloat &rArr; SCPI_ParamToFloat &rArr; strToFloat &rArr; strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDate_Comp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamFloat
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>RTIMQ1</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = RTIMQ1 &rArr; SCPI_ResultFloat &rArr; SCPI_FloatToStr &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultFloat
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>RTIMS1</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = RTIMS1 &rArr; SCPI_ParamFloat &rArr; SCPI_ParamToFloat &rArr; strToFloat &rArr; strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDate_Comp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamFloat
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>FTIMQ1</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = FTIMQ1 &rArr; SCPI_ResultFloat &rArr; SCPI_FloatToStr &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultFloat
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>FTIMS1</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = FTIMS1 &rArr; SCPI_ParamFloat &rArr; SCPI_ParamToFloat &rArr; strToFloat &rArr; strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDate_Comp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamFloat
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>ARCQ1</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ARCQ1 &rArr; SCPI_ResultFloat &rArr; SCPI_FloatToStr &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultFloat
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>ARCS1</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = ARCS1 &rArr; SCPI_ParamFloat &rArr; SCPI_ParamToFloat &rArr; strToFloat &rArr; strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDate_Comp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamFloat
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>FREQQ1</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = FREQQ1 &rArr; SCPI_ResultFloat &rArr; SCPI_FloatToStr &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultFloat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>FREQS1</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = FREQS1 &rArr; SCPI_ParamFloat &rArr; SCPI_ParamToFloat &rArr; strToFloat &rArr; strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamFloat
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>OPENQ1</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = OPENQ1 &rArr; SCPI_ResultFloat &rArr; SCPI_FloatToStr &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultFloat
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>OPENS1</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = OPENS1 &rArr; SCPI_ParamFloat &rArr; SCPI_ParamToFloat &rArr; strToFloat &rArr; strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDate_Comp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamFloat
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>SHORTQ1</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = SHORTQ1 &rArr; SCPI_ResultFloat &rArr; SCPI_FloatToStr &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultFloat
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>SHORTS1</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = SHORTS1 &rArr; SCPI_ParamFloat &rArr; SCPI_ParamToFloat &rArr; strToFloat &rArr; strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDate_Comp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamFloat
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>StartT</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = StartT &rArr; Uart0_Send &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Send
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>StopT</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = StopT &rArr; Uart0_Send &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Send
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sing_out_C
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRB_out
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Off
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_out
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DA_out
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>SetStep</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SetStep &rArr; SCPI_ParamUInt32 &rArr; ParamSignUInt32 &rArr; SCPI_Parameter &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamUInt32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>SetTSteps</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SetTSteps &rArr; SCPI_ParamUInt32 &rArr; ParamSignUInt32 &rArr; SCPI_Parameter &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamUInt32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>ACMode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACMode &rArr; SCPI_ResultCharacters &rArr; writeDelimiter &rArr; writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>DCMode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DCMode &rArr; SCPI_ResultCharacters &rArr; writeDelimiter &rArr; writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>IRMode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IRMode &rArr; SCPI_ResultCharacters &rArr; writeDelimiter &rArr; writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>OSMode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OSMode &rArr; SCPI_ResultCharacters &rArr; writeDelimiter &rArr; writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savetoeeprom
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>ReadRes</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ReadRes &rArr; UartRes &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRes
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>VoltageDcQ1</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = VoltageDcQ1 &rArr; SCPI_ResultDouble &rArr; SCPI_DoubleToStr &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultDouble
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>DMM_MeasureVoltageAcQ</STRONG> (Thumb, 78 bytes, Stack size 80 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = DMM_MeasureVoltageAcQ &rArr; SCPI_ParamNumber &rArr; SCPI_ParamToDouble &rArr; strToDouble &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultDouble
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamNumber
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_NumberToStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>DMM_ConfigureVoltageDc</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = DMM_ConfigureVoltageDc &rArr; SCPI_ParamDouble &rArr; SCPI_ParamToDouble &rArr; strToDouble &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamDouble
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>TEST_Bool</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TEST_Bool &rArr; SCPI_ParamBool &rArr; SCPI_ParamToChoice &rArr; matchPattern &rArr; compareStrAndNum &rArr; strBaseToInt32 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamBool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>TEST_ChoiceQ</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TEST_ChoiceQ &rArr; SCPI_ParamChoice &rArr; SCPI_ParamToChoice &rArr; matchPattern &rArr; compareStrAndNum &rArr; strBaseToInt32 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamChoice
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ChoiceToName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>TEST_Numbers</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = TEST_Numbers &rArr; SCPI_CommandNumbers &rArr; matchCommand &rArr; matchPattern &rArr; compareStrAndNum &rArr; strBaseToInt32 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_CommandNumbers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>TEST_Text</STRONG> (Thumb, 36 bytes, Stack size 120 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = TEST_Text &rArr; SCPI_ParamCopyText &rArr; SCPI_Parameter &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamCopyText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>TEST_ArbQ</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = TEST_ArbQ &rArr; SCPI_ParamArbitraryBlock &rArr; SCPI_Parameter &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArbitraryBlock
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamArbitraryBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>TEST_Chanlst</STRONG> (Thumb, 412 bytes, Stack size 192 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = TEST_Chanlst &rArr; SCPI_ExprChannelListEntry &rArr; channelRange &rArr; channelSpec &rArr; SCPI_ParamToInt32 &rArr; ParamSignToUInt32 &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parameter
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ExprChannelListEntry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>My_CoreTstQ</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scpi-def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = My_CoreTstQ &rArr; SCPI_ResultInt32 &rArr; resultUInt32BaseSign &rArr; UInt32ToStrBaseSign &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi-def.o(.constdata)
</UL>
<P><STRONG><a name="[26d]"></a>GPIO_GetPointer</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lpc177x_8x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetMask
</UL>

<P><STRONG><a name="[278]"></a>FIO_HalfWordGetPointer</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordReadValue
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordClearValue
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetValue
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetMask
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetDir
</UL>

<P><STRONG><a name="[27e]"></a>FIO_ByteGetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc177x_8x_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteReadValue
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteClearValue
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetValue
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetMask
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetDir
</UL>

<P><STRONG><a name="[285]"></a>uart_set_divisors</STRONG> (Thumb, 400 bytes, Stack size 80 bytes, lpc177x_8x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[2a1]"></a>MODS_SendAckErr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = MODS_SendAckErr &rArr; MODS_SendWithCRC &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendWithCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_06H
</UL>

<P><STRONG><a name="[2a2]"></a>MODS_SendAckOk</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = MODS_SendAckOk &rArr; MODS_SendWithCRC &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendWithCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[2a8]"></a>MODS_WriteRegValue</STRONG> (Thumb, 458 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MODS_WriteRegValue &rArr; Uart0_Send &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Send
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sing_out_C
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRB_out
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Off
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_out
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DA_out
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_06H
</UL>

<P><STRONG><a name="[2a9]"></a>MODS_06H</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = MODS_06H &rArr; MODS_SendAckErr &rArr; MODS_SendWithCRC &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEBufToUint16
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_WriteRegValue
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendAckErr
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecHandle
</UL>

<P><STRONG><a name="[2ac]"></a>MODS_ReadRegValue</STRONG> (Thumb, 598 bytes, Stack size 0 bytes, debug_frmwrk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_03H
</UL>

<P><STRONG><a name="[2ab]"></a>MODS_03H</STRONG> (Thumb, 314 bytes, Stack size 80 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = MODS_03H &rArr; MODS_SendWithCRC &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEBufToUint16
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendWithCRC
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_ReadRegValue
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecHandle
</UL>

<P><STRONG><a name="[2a5]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, debug_frmwrk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_init
</UL>

<P><STRONG><a name="[2ad]"></a>PIN_GetPointer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lpc177x_8x_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetFilter
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_DacEnable
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetAnalogPinMode
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetOpenDrainMode
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetI2CMode
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetInBufMode
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetSlewMode
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetHysMode
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetPinMode
</UL>

<P><STRONG><a name="[2b9]"></a>PWM_GetPointer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lpc177x_8x_pwm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_MatchUpdate
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CounterCmd
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigMatch
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Cmd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ChannelConfig
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ChannelCmd
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetCaptureValue
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigCapture
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ResetCounter
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DeInit
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ClearIntPending
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetIntStatus
</UL>

<P><STRONG><a name="[2fb]"></a>_SetDisplayOrigin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcdconf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[2f1]"></a>_InitController</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lcdconf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _InitController &rArr; LCD_SetVSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Ctrl
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVRAMAddrEx
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[300]"></a>SCPI_ErrorEmitEmpty</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCPI_ErrorEmitEmpty &rArr; SCPI_RegClearBits &rArr;  SCPI_RegSet (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegGet
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegClearBits
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorCount
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPop
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorClear
</UL>

<P><STRONG><a name="[303]"></a>SCPI_ErrorEmit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPushEx
</UL>

<P><STRONG><a name="[309]"></a>SCPI_ErrorAddInternal</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCPI_ErrorAddInternal &rArr; fifo_remove_last
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_remove_last
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_add
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPushEx
</UL>

<P><STRONG><a name="[30f]"></a>numericRange</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, expression.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_DecimalNumericProgramData
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_Colon
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ExprNumericListEntry
</UL>

<P><STRONG><a name="[319]"></a>channelSpec</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, expression.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = channelSpec &rArr; SCPI_ParamToInt32 &rArr; ParamSignToUInt32 &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_SpecificCharacter
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_DecimalNumericProgramData
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channelRange
</UL>

<P><STRONG><a name="[31b]"></a>channelRange</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, expression.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = channelRange &rArr; channelSpec &rArr; SCPI_ParamToInt32 &rArr; ParamSignToUInt32 &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_Colon
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channelSpec
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ExprChannelListEntry
</UL>

<P><STRONG><a name="[322]"></a>writeControl</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ieee488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = writeControl
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSet
</UL>

<P><STRONG><a name="[31e]"></a>regUpdateEvent</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ieee488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = regUpdateEvent &rArr;  SCPI_RegSet (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSet
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegGet
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSet
</UL>

<P><STRONG><a name="[320]"></a>regUpdateSTB</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ieee488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSetBits
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegGet
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSet
</UL>

<P><STRONG><a name="[321]"></a>regUpdate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ieee488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = regUpdate &rArr;  SCPI_RegSet (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSet
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegGet
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_RegSet
</UL>

<P><STRONG><a name="[328]"></a>isws</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lexer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipWs
</UL>

<P><STRONG><a name="[342]"></a>isbdigit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lexer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipBinNum
</UL>

<P><STRONG><a name="[340]"></a>isqdigit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lexer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipOctNum
</UL>

<P><STRONG><a name="[326]"></a>iseos</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lexer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_ProgramExpression
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_ArbitraryBlockProgramData
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_StringProgramData
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_NondecimalNumericData
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_CharacterProgramData
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipProgramExpression
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipQuoteProgramData
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipBinNum
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipOctNum
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipHexNum
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipExponent
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipCommonProgramHeader
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipProgramMnemonic
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipColon
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipStar
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipSlashDot
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipChr
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipAlpha
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipPlusmn
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipNumbers
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipDigit
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipWs
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_IsEos
</UL>

<P><STRONG><a name="[330]"></a>ischr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lexer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_ProgramExpression
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_StringProgramData
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_CharacterProgramData
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipQuoteProgramData
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipProgramMnemonic
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipColon
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipStar
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipSlashDot
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipChr
</UL>

<P><STRONG><a name="[32d]"></a>isplusmn</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lexer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipPlusmn
</UL>

<P><STRONG><a name="[344]"></a>isH</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lexer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_NondecimalNumericData
</UL>

<P><STRONG><a name="[346]"></a>isB</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lexer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_NondecimalNumericData
</UL>

<P><STRONG><a name="[345]"></a>isQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lexer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_NondecimalNumericData
</UL>

<P><STRONG><a name="[33c]"></a>isE</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lexer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipExponent
</UL>

<P><STRONG><a name="[327]"></a>skipWs</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = skipWs
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isws
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_WhiteSpace
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipExponent
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_DecimalNumericProgramData
</UL>

<P><STRONG><a name="[329]"></a>skipDigit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = skipDigit &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_SuffixProgramData
</UL>

<P><STRONG><a name="[32b]"></a>skipNumbers</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = skipNumbers &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipExponent
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipMantisa
</UL>

<P><STRONG><a name="[32c]"></a>skipPlusmn</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = skipPlusmn
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isplusmn
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipExponent
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipMantisa
</UL>

<P><STRONG><a name="[32e]"></a>skipAlpha</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = skipAlpha &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_SuffixProgramData
</UL>

<P><STRONG><a name="[32f]"></a>skipChr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = skipChr
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ischr
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_NewLine
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_Semicolon
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_ArbitraryBlockProgramData
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_NondecimalNumericData
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_SuffixProgramData
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_ProgramHeader
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipMantisa
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_SpecificCharacter
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_Comma
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_Colon
</UL>

<P><STRONG><a name="[331]"></a>skipSlashDot</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = skipSlashDot
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ischr
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_SuffixProgramData
</UL>

<P><STRONG><a name="[332]"></a>skipStar</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = skipStar
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ischr
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipCommonProgramHeader
</UL>

<P><STRONG><a name="[333]"></a>skipColon</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = skipColon
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ischr
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipCompoundProgramHeader
</UL>

<P><STRONG><a name="[334]"></a>skipProgramMnemonic</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = skipProgramMnemonic &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ischr
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipCompoundProgramHeader
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipCommonProgramHeader
</UL>

<P><STRONG><a name="[336]"></a>skipCommonProgramHeader</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = skipCommonProgramHeader &rArr; skipProgramMnemonic &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipProgramMnemonic
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipStar
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_ProgramHeader
</UL>

<P><STRONG><a name="[337]"></a>skipCompoundProgramHeader</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = skipCompoundProgramHeader &rArr; skipProgramMnemonic &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipProgramMnemonic
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipColon
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_ProgramHeader
</UL>

<P><STRONG><a name="[33a]"></a>skipMantisa</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = skipMantisa &rArr; skipNumbers &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipChr
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipPlusmn
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipNumbers
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_DecimalNumericProgramData
</UL>

<P><STRONG><a name="[33b]"></a>skipExponent</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = skipExponent &rArr; skipNumbers &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipPlusmn
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipNumbers
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipWs
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isE
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_DecimalNumericProgramData
</UL>

<P><STRONG><a name="[33e]"></a>skipHexNum</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = skipHexNum &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_NondecimalNumericData
</UL>

<P><STRONG><a name="[33f]"></a>skipOctNum</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = skipOctNum
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isqdigit
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_NondecimalNumericData
</UL>

<P><STRONG><a name="[341]"></a>skipBinNum</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = skipBinNum
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isbdigit
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_NondecimalNumericData
</UL>

<P><STRONG><a name="[348]"></a>isascii7bit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lexer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipQuoteProgramData
</UL>

<P><STRONG><a name="[347]"></a>skipQuoteProgramData</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = skipQuoteProgramData
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isascii7bit
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ischr
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipSingleQuoteProgramData
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipDoubleQuoteProgramData
</UL>

<P><STRONG><a name="[349]"></a>skipDoubleQuoteProgramData</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = skipDoubleQuoteProgramData &rArr; skipQuoteProgramData
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipQuoteProgramData
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_StringProgramData
</UL>

<P><STRONG><a name="[34a]"></a>skipSingleQuoteProgramData</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = skipSingleQuoteProgramData &rArr; skipQuoteProgramData
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipQuoteProgramData
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_StringProgramData
</UL>

<P><STRONG><a name="[34c]"></a>isNonzeroDigit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isNonzeroDigit &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_ArbitraryBlockProgramData
</UL>

<P><STRONG><a name="[34f]"></a>isProgramExpression</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lexer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipProgramExpression
</UL>

<P><STRONG><a name="[34e]"></a>skipProgramExpression</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lexer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = skipProgramExpression
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isProgramExpression
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iseos
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiLex_ProgramExpression
</UL>

<P><STRONG><a name="[35a]"></a>writeData</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultFloat
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultDouble
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultError
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArbitraryBlockData
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArbitraryBlockHeader
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultText
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resultUInt64BaseSign
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resultUInt32BaseSign
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSemicolon
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNewLine
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDelimiter
</UL>

<P><STRONG><a name="[35c]"></a>flushData</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flushData
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNewLine
</UL>

<P><STRONG><a name="[359]"></a>writeDelimiter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = writeDelimiter &rArr; writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultFloat
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultDouble
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultCharacters
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultError
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultText
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resultUInt64BaseSign
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resultUInt32BaseSign
</UL>

<P><STRONG><a name="[35b]"></a>writeNewLine</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = writeNewLine &rArr; writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flushData
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parse
</UL>

<P><STRONG><a name="[35d]"></a>writeSemicolon</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = writeSemicolon &rArr; writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultError
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCommand
</UL>

<P><STRONG><a name="[35e]"></a>processCommand</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = processCommand &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSemicolon
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parse
</UL>

<P><STRONG><a name="[35f]"></a>findCommandHeader</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = findCommandHeader &rArr; matchCommand &rArr; matchPattern &rArr; compareStrAndNum &rArr; strBaseToInt32 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parse
</UL>

<P><STRONG><a name="[364]"></a>invalidateToken</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, parser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parameter
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpiParser_detectProgramMessageUnit
</UL>

<P><STRONG><a name="[36a]"></a>getBasePrefix</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, parser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resultUInt64BaseSign
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resultUInt32BaseSign
</UL>

<P><STRONG><a name="[368]"></a>resultUInt32BaseSign</STRONG> (Thumb, 94 bytes, Stack size 72 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = resultUInt32BaseSign &rArr; UInt32ToStrBaseSign &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UInt32ToStrBaseSign
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBasePrefix
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDelimiter
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt32
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultBool
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultUInt32Base
</UL>

<P><STRONG><a name="[36b]"></a>resultUInt64BaseSign</STRONG> (Thumb, 96 bytes, Stack size 112 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UInt64ToStrBaseSign
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBasePrefix
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDelimiter
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultUInt64Base
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultInt64
</UL>

<P><STRONG><a name="[379]"></a>ParamSignToUInt32</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ParamSignToUInt32 &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strBaseToUInt32
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strBaseToInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToInt32
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToUInt32
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignUInt32
</UL>

<P><STRONG><a name="[37c]"></a>ParamSignToUInt64</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ParamSignToUInt64 &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strBaseToUInt64
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strBaseToInt64
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToUInt64
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamToInt64
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignUInt64
</UL>

<P><STRONG><a name="[387]"></a>ParamSignUInt32</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ParamSignUInt32 &rArr; SCPI_Parameter &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parameter
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamIsNumber
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignToUInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamUInt32
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamInt32
</UL>

<P><STRONG><a name="[388]"></a>ParamSignUInt64</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Parameter
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamIsNumber
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamSignToUInt64
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamUInt64
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamInt64
</UL>

<P><STRONG><a name="[38f]"></a>produceResultArrayBinary</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArbitraryBlock
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Swap64
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Swap32
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_Swap16
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_GetNativeFormat
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArbitraryBlockData
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArbitraryBlockHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArrayDouble
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArrayFloat
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArrayUInt64
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArrayInt64
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArrayUInt32
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArrayInt32
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArrayUInt16
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArrayInt16
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArrayUInt8
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ResultArrayInt8
</UL>

<P><STRONG><a name="[3a4]"></a>translateUnit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, units.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = translateUnit &rArr; compareStr &rArr; strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareStr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transformNumber
</UL>

<P><STRONG><a name="[3a6]"></a>translateUnitInverse</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, units.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = translateUnitInverse &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_NumberToStr
</UL>

<P><STRONG><a name="[3a8]"></a>transformNumber</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, units.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = transformNumber &rArr; SCPI_ErrorPush &rArr; SCPI_ErrorPushEx &rArr; SCPI_ErrorEmit &rArr; SCPI_RegSetBits &rArr; SCPI_RegSet &rArr; regUpdateSTB &rArr;  SCPI_RegSetBits (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ErrorPush
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipWhitespace
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translateUnit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_ParamNumber
</UL>

<P><STRONG><a name="[3c0]"></a>__ARM_isnan</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, utils.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_dtostre
</UL>

<P><STRONG><a name="[3b7]"></a>patternSeparatorShortPos</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = patternSeparatorShortPos &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchPattern
</UL>

<P><STRONG><a name="[3b8]"></a>patternSeparatorPos</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = patternSeparatorPos &rArr; strnpbrk
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnpbrk
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchCommand
</UL>

<P><STRONG><a name="[3b9]"></a>cmdSeparatorPos</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cmdSeparatorPos &rArr; strnpbrk
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnpbrk
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchCommand
</UL>

<P><STRONG><a name="[3ba]"></a>scpi_ecvt</STRONG> (Thumb, 520 bytes, Stack size 96 bytes, utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modf
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_dtostre
</UL>

<P><STRONG><a name="[429]"></a>_AddFreeMemory</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, gui_alloc.o(i._AddFreeMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _AddFreeMemory &rArr; _RemoveFreeBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteTagData
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMinIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[424]"></a>_Alloc</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, gui_alloc.o(i._Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteTagData
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PushFreeBlock
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PopFreeBlock
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMinIndex
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
</UL>

<P><STRONG><a name="[4b7]"></a>_EnlargeBlocks</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, gui_alloc.o(i._EnlargeBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PopFreeBlock
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>

<P><STRONG><a name="[4a5]"></a>_GetMinIndex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_alloc.o(i._GetMinIndex))
<BR><BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>

<P><STRONG><a name="[42b]"></a>_InitOnce</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, gui_alloc.o(i._InitOnce))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TestRAM
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[5d]"></a>_OnExit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gui_alloc.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _OnExit &rArr; GUI__memset
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_alloc.o(i._InitOnce)
</UL>
<P><STRONG><a name="[4a7]"></a>_PopFreeBlock</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gui_alloc.o(i._PopFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _PopFreeBlock &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[42a]"></a>_PushFreeBlock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gui_alloc.o(i._PushFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _PushFreeBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[42d]"></a>_RemoveFreeBlock</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gui_alloc.o(i._RemoveFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _RemoveFreeBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMinIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>

<P><STRONG><a name="[42c]"></a>_RemoveHoles</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, gui_alloc.o(i._RemoveHoles))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _RemoveHoles &rArr; _AddFreeMemory &rArr; _RemoveFreeBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[4be]"></a>_TestRAM</STRONG> (Thumb, 234 bytes, Stack size 20 bytes, gui_alloc.o(i._TestRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _TestRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>

<P><STRONG><a name="[4a6]"></a>_WriteTagData</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_alloc.o(i._WriteTagData))
<BR><BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>

<P><STRONG><a name="[452]"></a>_InitContext</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, gui_core.o(i._InitContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _InitContext
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[47]"></a>_OnExit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gui_core.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _OnExit &rArr; GUI__memset
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_core.o(i.GUI__Config)
</UL>
<P><STRONG><a name="[437]"></a>_UnlinkDevice</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gui_device.o(i._UnlinkDevice))
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_UnlinkTaskDevices
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Unlink
</UL>

<P><STRONG><a name="[3fe]"></a>CL_DispChar</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, gui_dispchar.o(i.CL_DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CL_DispChar &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetOverlap
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontSizeY
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DispChar
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCharAt
</UL>

<P><STRONG><a name="[445]"></a>_DrawGradientRounded</STRONG> (Thumb, 260 bytes, Stack size 88 bytes, gui_drawgradientrounded.o(i._DrawGradientRounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
</UL>

<P><STRONG><a name="[40b]"></a>Abs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_drawline.o(i.Abs))
<BR><BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
</UL>

<P><STRONG><a name="[413]"></a>_DrawLineEnd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_drawline.o(i._DrawLineEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DrawLineEnd &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[40e]"></a>_SetLineColor</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, gui_drawline.o(i._SetLineColor))
<BR><BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
</UL>

<P><STRONG><a name="[40f]"></a>_atan2</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, gui_drawline.o(i._atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[a4]"></a>_CalcSizeOfChar</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_uc_encodeutf8.o(i._CalcSizeOfChar))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodeutf8.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>_Encode</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gui_uc_encodeutf8.o(i._Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Encode
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcSizeOfChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodeutf8.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>_GetCharCode</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gui_uc_encodeutf8.o(i._GetCharCode))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodeutf8.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>_GetCharSize</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gui_uc_encodeutf8.o(i._GetCharSize))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodeutf8.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>_Color2IndexBulk</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, guicc_565.o(i._Color2IndexBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_565.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>_Color2Index_565</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, guicc_565.o(i._Color2Index_565))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Color2Index_565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_565.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>_GetIndexMask_565</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicc_565.o(i._GetIndexMask_565))
<BR>[Address Reference Count : 1]<UL><LI> guicc_565.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>_Index2ColorBulk</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, guicc_565.o(i._Index2ColorBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_565.o(.constdata)
</UL>
<P><STRONG><a name="[470]"></a>_GetDevProp</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getex.o(i._GetDevProp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColorsEx
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorYEx
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorXEx
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
</UL>

<P><STRONG><a name="[58]"></a>_CopyBuffer</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, guidrv_lin_16.o(i._CopyBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _CopyBuffer &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[4b0]"></a>_DrawBitLine1BPP</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, guidrv_lin_16.o(i._DrawBitLine1BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DrawBitLine1BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[4ae]"></a>_DrawBitLine2BPP</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, guidrv_lin_16.o(i._DrawBitLine2BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _DrawBitLine2BPP &rArr; _SetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[4af]"></a>_DrawBitLine4BPP</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, guidrv_lin_16.o(i._DrawBitLine4BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _DrawBitLine4BPP &rArr; _SetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[4b1]"></a>_DrawBitLine8BPP</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, guidrv_lin_16.o(i._DrawBitLine8BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _DrawBitLine8BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[af]"></a>_DrawBitmap</STRONG> (Thumb, 386 bytes, Stack size 72 bytes, guidrv_lin_16.o(i._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _DrawBitmap &rArr; _DrawBitLine4BPP &rArr; _SetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine8BPP
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine4BPP
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine2BPP
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine1BPP
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>_DrawHLine</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, guidrv_lin_16.o(i._DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _DrawHLine &rArr; _FillRect &rArr; _FillRectOpt16
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>_DrawVLine</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, guidrv_lin_16.o(i._DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _DrawVLine &rArr; _FillRect &rArr; _FillRectOpt16
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>_FillRect</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, guidrv_lin_16.o(i._FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _FillRect &rArr; _FillRectOpt16
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRectOpt16
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[4b8]"></a>_FillRectOpt16</STRONG> (Thumb, 324 bytes, Stack size 20 bytes, guidrv_lin_16.o(i._FillRectOpt16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _FillRectOpt16
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>

<P><STRONG><a name="[b9]"></a>_GetDevData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidrv_lin_16.o(i._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>_GetDevFunc</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, guidrv_lin_16.o(i._GetDevFunc))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>_GetDevProp</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, guidrv_lin_16.o(i._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>_GetPixelIndex</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, guidrv_lin_16.o(i._GetPixelIndex))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>_GetPos</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, guidrv_lin_16.o(i._GetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _GetPos &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[ba]"></a>_GetRect</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, guidrv_lin_16.o(i._GetRect))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>_Init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, guidrv_lin_16.o(i._Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _Init &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[4ac]"></a>_InitOnce</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, guidrv_lin_16.o(i._InitOnce))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowBuffer
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVis
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVSize
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAMAddr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDevFunc
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlpha
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPos
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyBuffer
</UL>

<P><STRONG><a name="[54]"></a>_Off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidrv_lin_16.o(i._Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Off &rArr; LCD_X_DisplayDriver &rArr; _InitController &rArr; LCD_SetVSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[53]"></a>_On</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidrv_lin_16.o(i._On))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _On &rArr; LCD_X_DisplayDriver &rArr; _InitController &rArr; LCD_SetVSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[5b]"></a>_ReadRect</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, guidrv_lin_16.o(i._ReadRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _ReadRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[50]"></a>_SetAlpha</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, guidrv_lin_16.o(i._SetAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _SetAlpha &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[55]"></a>_SetAlphaMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, guidrv_lin_16.o(i._SetAlphaMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _SetAlphaMode &rArr; LCD_X_DisplayDriver &rArr; _InitController &rArr; LCD_SetVSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[57]"></a>_SetChroma</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, guidrv_lin_16.o(i._SetChroma))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _SetChroma &rArr; LCD_X_DisplayDriver &rArr; _InitController &rArr; LCD_SetVSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[56]"></a>_SetChromaMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, guidrv_lin_16.o(i._SetChromaMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _SetChromaMode &rArr; LCD_X_DisplayDriver &rArr; _InitController &rArr; LCD_SetVSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[5a]"></a>_SetDevFunc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, guidrv_lin_16.o(i._SetDevFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _SetDevFunc &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[b6]"></a>_SetOrg</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, guidrv_lin_16.o(i._SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _SetOrg &rArr; LCD_X_DisplayDriver &rArr; _InitController &rArr; LCD_SetVSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorYEx
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorXEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>_SetPixelIndex</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, guidrv_lin_16.o(i._SetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine4BPP
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine2BPP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>_SetPos</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, guidrv_lin_16.o(i._SetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _SetPos &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[4d]"></a>_SetSize</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, guidrv_lin_16.o(i._SetSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _SetSize &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[4b]"></a>_SetVRAMAddr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, guidrv_lin_16.o(i._SetVRAMAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _SetVRAMAddr &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[4c]"></a>_SetVSize</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, guidrv_lin_16.o(i._SetVSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _SetVSize &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[51]"></a>_SetVis</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, guidrv_lin_16.o(i._SetVis))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _SetVis &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[59]"></a>_ShowBuffer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, guidrv_lin_16.o(i._ShowBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _ShowBuffer &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[b5]"></a>_XorPixel</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, guidrv_lin_16.o(i._XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _XorPixel &rArr; _SetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[46a]"></a>_DispLine</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, gui_charline.o(i._DispLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _DispLine &rArr; GUI__ManageCache &rArr; GUI__ManageCacheEx
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
</UL>

<P><STRONG><a name="[7]"></a>_Log2VisBuffered</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_charline.o(i._Log2VisBuffered))
<BR>[Address Reference Count : 1]<UL><LI> gui_charline.o(.data)
</UL>
<P><STRONG><a name="[415]"></a>_Add</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, gui_fillpolygon.o(i._Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _Add
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
</UL>

<P><STRONG><a name="[44e]"></a>_GotoX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_goto.o(i._GotoX))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
</UL>

<P><STRONG><a name="[44f]"></a>_GotoY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_goto.o(i._GotoY))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
</UL>

<P><STRONG><a name="[422]"></a>_GetTaskNo</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gui_task.o(i._GetTaskNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetTaskNo
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[45]"></a>_OnExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_task.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_task.o(i.GUITASK_Init)
</UL>
<P><STRONG><a name="[bd]"></a>_CalcSizeOfChar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._CalcSizeOfChar))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>_Encode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._Encode))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>_GetCharCode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._GetCharCode))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>_GetCharSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._GetCharSize))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>_SetBkColor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd.o(i._SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetBkColor
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColorIndex
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>_SetColor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd.o(i._SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetColor
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>_SetDrawMode</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lcd.o(i._SetDrawMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _SetDrawMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>_OnExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_color.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_color.o(i.LCD_InitColors)
</UL>
<P><STRONG><a name="[4b4]"></a>_DrawBitLine1BPP</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, guidev_16.o(i._DrawBitLine1BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawBitLine1BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[4b5]"></a>_DrawBitLine2BPP</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, guidev_16.o(i._DrawBitLine2BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawBitLine2BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[4b6]"></a>_DrawBitLine4BPP</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, guidev_16.o(i._DrawBitLine4BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DrawBitLine4BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[c2]"></a>_DrawBitmap</STRONG> (Thumb, 664 bytes, Stack size 112 bytes, guidev_16.o(i._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _DrawBitmap &rArr; _DrawBitLine2BPP
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine4BPP
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine2BPP
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine1BPP
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>_DrawHLine</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, guidev_16.o(i._DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _DrawHLine &rArr; _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>_DrawVLine</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, guidev_16.o(i._DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawVLine &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>_FillRect</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, guidev_16.o(i._FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset16
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>_GetDevData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidev_16.o(i._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>_GetDevFunc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidev_16.o(i._GetDevFunc))
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>_GetDevProp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, guidev_16.o(i._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>_GetPixelIndex</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, guidev_16.o(i._GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetPixelIndex &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>_GetRect</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, guidev_16.o(i._GetRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetRect
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>_SetOrg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guidev_16.o(i._SetOrg))
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>_SetPixelIndex</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, guidev_16.o(i._SetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _SetPixelIndex &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[4b3]"></a>_XY2PTR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, guidev_16.o(i._XY2PTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[c8]"></a>_XorPixel</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, guidev_16.o(i._XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _XorPixel &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[49f]"></a>_DesktopHandle2Index</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm.o(i._DesktopHandle2Index))
<BR><BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[4a2]"></a>_FindNext_IVR</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, wm.o(i._FindNext_IVR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _FindNext_IVR &rArr; _Findy1 &rArr;  _Findy1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>

<P><STRONG><a name="[4bb]"></a>_Findx0</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, wm.o(i._Findx0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = _Findx0 &rArr;  _Findx0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
</UL>

<P><STRONG><a name="[4bc]"></a>_Findx1</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, wm.o(i._Findx1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = _Findx1 &rArr;  _Findx1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
</UL>

<P><STRONG><a name="[4ba]"></a>_Findy1</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, wm.o(i._Findy1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = _Findy1 &rArr;  _Findy1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
</UL>

<P><STRONG><a name="[499]"></a>_Invalidate1Abs</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, wm.o(i._Invalidate1Abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Invalidate1Abs &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MergeRect
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RectIsNZ
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Invalidate1Abs
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
</UL>

<P><STRONG><a name="[4a]"></a>_OnExit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wm.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(i.WM_Init)
</UL>
<P><STRONG><a name="[49d]"></a>_SetClipRectUserIntersect</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm.o(i._SetClipRectUserIntersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectEx
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>

<P><STRONG><a name="[49]"></a>_cbBackWin</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, wm.o(i._cbBackWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _cbBackWin &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DesktopHandle2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(i.WM_Init)
</UL>
<P><STRONG><a name="[ce]"></a>_Color2Index_0</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, guicc_0.o(i._Color2Index_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Color2Index_0 &rArr; LCD_GetNumColors &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CalcColorDist
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_0.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>_GetIndexMask_0</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, guicc_0.o(i._GetIndexMask_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetIndexMask_0 &rArr; LCD_GetNumColors &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_0.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>_Index2Color_0</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, guicc_0.o(i._Index2Color_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _Index2Color_0 &rArr; LCD_GetNumColors &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_0.o(.constdata)
</UL>
<P><STRONG><a name="[4a9]"></a>_Convert16</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, guidev_writetoactiveopaque.o(i._Convert16))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Convert16 &rArr; GUI__CompactPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
</UL>

<P><STRONG><a name="[4ab]"></a>_Convert8</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, guidev_writetoactiveopaque.o(i._Convert8))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Convert8 &rArr; GUI__CompactPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
</UL>

<P><STRONG><a name="[45e]"></a>_WriteToActiveOpaque_8</STRONG> (Thumb, 824 bytes, Stack size 168 bytes, guidev_writetoactiveopaque.o(i._WriteToActiveOpaque_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _WriteToActiveOpaque_8 &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfColor2IndexEx
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__DrawBitmap_1bpp
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Convert8
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Convert16
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[45f]"></a>_WriteToActiveOpaque_HT</STRONG> (Thumb, 826 bytes, Stack size 144 bytes, guidev_writetoactiveopaque.o(i._WriteToActiveOpaque_HT))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _WriteToActiveOpaque_HT &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[4e4]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[4d6]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[4f3]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[4e9]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[3d7]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[41]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[3e3]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[3ee]"></a>_fp_value</STRONG> (Thumb, 588 bytes, Stack size 96 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
